//! Collection of physical and mathematical constants which appear frequently.
//!
//! When implementing code that is numerically intensive, it advisable to
//! collect all the constants into a single multiplicative constants; however,
//! make sure to document in the code what the resulting 'magic number'
//! corresponds to.

/// Planck mass, \\(M_{\text{Pl}} = \sqrt{\hbar c / G}\\), in units of GeV /
/// \\(c^2\\).
///
/// In this library, the Planck mass will be denoted by \\(M_{\text{Pl}}\\), in
/// contrast to the reduced Planck mass \\(m_{\text{Pl}}\\).
pub const PLANCK_MASS: f64 = 1.220_910e19;

/// Reduced Planck mass, \\(m_{\text{Pl}} = \sqrt{\hbar c / 8 \pi G}\\), in
/// units of GeV / \\(c^2\\).
///
/// In this library, the reduced Planck mass will be denoted by
/// \\(m_{\text{Pl}}\\), in contrast to the Planck mass \\(M_{\text{Pl}}\\).
pub const REDUCED_PLANCK_MASS: f64 = 2.435_363e18;

/// Riemann zeta function evaluated at 3: \\(\zeta(3) \approx 1.202\dots\\)
pub const ZETA_3: f64 = 1.202_056_903_159_594_2;

/// Euler gamma constant: \\(\gamma_\textsc{E} \approx 0.577\dots\\)
pub const EULER_GAMMA: f64 = 0.577_215_664_901_532_860_61;

/// \\(\pi\\)
pub const PI: f64 = ::std::f64::consts::PI;
/// \\(\pi\\) [named to follow the convention `PI_n`]
pub const PI_1: f64 = PI;
/// \\(\pi^2\\)
pub const PI_2: f64 = 9.869_604_401_089_358;
/// \\(\pi^3\\)
pub const PI_3: f64 = 3.100_627_668_029_982e1;
/// \\(\pi^4\\)
pub const PI_4: f64 = 9.740_909_103_400_244e1;
/// \\(\pi^{-1}\\)
pub const PI_M1: f64 = 3.183_098_861_837_907e-1;
/// \\(\pi^{-2}\\)
pub const PI_M2: f64 = 1.013_211_836_423_377_8e-1;
/// \\(\pi^{-3}\\)
pub const PI_M3: f64 = 3.225_153_443_319_949e-2;
/// \\(\pi^{-4}\\)
pub const PI_M4: f64 = 1.026_598_225_468_433_6e-2;

////////////////////////////////////////////////////////////////////////////////
// Crate Constants
////////////////////////////////////////////////////////////////////////////////

/// Value of \\(g_{*}\\) for the Standard Model.
///
/// The first column is the log-transformed inverse temperature,
/// \\(\ln(\beta)\\), where \\(\beta\\) is in units of inverse
/// gigaelectronvolts.
///
/// The second column is the value of \\(g_{*}\\).
///
/// Data is sourced from [`arXiv:1609.04979`](https://arxiv.org/abs/1609.04979).
#[cfg_attr(feature = "cargo-clippy", allow(approx_constant))]
pub(crate) const STANDARD_MODEL_GSTAR: [(f64, f64); 37] = [
    (-9.210_340_371_976_184, 106.75),
    (-8.517_193_191_416_238, 106.75),
    (-7.600_902_459_542_082, 106.74),
    (-6.907_755_278_982_137, 106.7),
    (-6.214_608_098_422_191, 106.56),
    (-5.298_317_366_548_036, 105.61),
    (-4.605_170_185_988_092, 102.85),
    (-3.912_023_005_428_146, 96.53),
    (-2.995_732_273_553_991, 88.14),
    (-2.302_585_092_994_046, 86.13),
    (-1.609_437_912_434_100_3, 85.37),
    (-0.693_147_180_559_945_3, 81.8),
    (0.0, 75.5),
    (0.693_147_180_559_945_3, 68.55),
    (1.539_445_540_614_065_5, 62.25),
    (1.544_118_446_313_457_8, 54.8),
    (1.609_437_912_434_100_3, 45.47),
    (1.660_731_206_821_650_9, 39.77),
    (1.714_798_428_091_926_6, 34.91),
    (1.771_956_841_931_875_4, 30.84),
    (1.832_581_463_748_310_2, 27.49),
    (1.897_119_984_885_881_3, 24.77),
    (1.966_112_856_372_832_7, 22.59),
    (2.040_220_828_526_554_6, 20.86),
    (2.302_585_092_994_046, 17.55),
    (2.995_732_273_553_991, 14.32),
    (3.912_023_005_428_146, 11.25),
    (4.605_170_185_988_092, 10.76),
    (5.298_317_366_548_036, 10.74),
    (6.214_608_098_422_191, 10.7),
    (6.907_755_278_982_137, 10.56),
    (7.600_902_459_542_082, 10.03),
    (8.517_193_191_416_238, 7.55),
    (9.210_340_371_976_184, 4.78),
    (9.903_487_552_536_127, 3.93),
    (10.819_778_284_410_283, 3.91),
    (11.512_925_464_970_229, 3.91),
];

/// Value of \\(g_{*}\\) for a fermion.
///
/// The first column is the log-transformed inverse temperature scaled to the
/// fermion's mass: \\(\ln(m\beta)\\).
///
/// The second column is is log-transformed value of \\(g_{*}\\),
/// \\(\log(g_{*})\\).
///
/// Data is sourced from [`arXiv:1609.04979`](https://arxiv.org/abs/1609.04979).
#[cfg_attr(feature = "cargo-clippy", allow(approx_constant))]
pub(crate) const FERMION_GSTAR: [(f64, f64); 21] = [
    (-2.302_585_092_994_046, -0.133_531_392_624_522_63),
    (-0.693_147_180_559_945_3, -0.134_674_903_326_601_6),
    (0.0, -0.160_168_752_152_821_34),
    (0.693_147_180_559_945_3, -0.239_527_030_564_733_8),
    (1.098_612_288_668_109_8, -0.536_143_431_750_280_7),
    (1.386_294_361_119_890_6, -0.975_510_091_534_126_3),
    (1.609_437_912_434_100_3, -1.505_077_897_109_857_5),
    (1.791_759_469_228_055, -2.120_263_536_200_091),
    (1.945_910_149_055_313_2, -3.473_768_074_496_991),
    (2.079_441_541_679_835_7, -4.199_705_077_879_927),
    (2.197_224_577_336_219_6, -4.980_591_172_747_879),
    (2.302_585_092_994_046, -5.760_352_826_144_595_5),
    (2.484_906_649_788_000_4, -7.371_379_301_263_834),
    (2.639_057_329_615_258_4, -9.036_387_064_852_745),
    (2.772_588_722_239_781, -10.738_198_297_417_86),
    (2.890_371_757_896_164_5, -12.470_038_191_364_639),
    (2.995_732_273_553_991, -14.229_511_997_094_725),
    (3.401_197_381_662_155_5, -23.285_917_835_359_264),
    (3.688_879_454_113_936_3, -32.602_916_581_708_875),
    (3.912_023_005_428_146, -42.066_428_392_713_18),
    (4.605_170_185_988_092, -90.377_072_055_856_23),
];

/// Value of \\(g_{*}\\) for a boson.
///
/// The first column is the log-transformed inverse temperature scaled to the
/// fermion's mass: \\(\ln(m\beta)\\).
///
/// The second column is is log-transformed value of \\(g_{*}\\),
/// \\(\log(g_{*})\\).
///
/// Data is sourced from [`arXiv:1609.04979`](https://arxiv.org/abs/1609.04979).
#[cfg_attr(feature = "cargo-clippy", allow(approx_constant))]
pub(crate) const BOSON_GSTAR: [(f64, f64); 21] = [
    (-2.302_585_092_994_046, 0.0),
    (-0.693_147_180_559_945, -0.002_002_002_670_673_079_3),
    (0.0, -0.040_821_994_520_255_166),
    (0.693_147_180_559_945_3, -0.147_340_587_898_709_13),
    (1.098_612_288_668_109_8, -0.489_390_343_045_925_66),
    (1.386_294_361_119_890_6, -0.954_511_944_694_352_9),
    (1.609_437_912_434_100_3, -1.505_077_897_109_857_5),
    (1.791_759_469_228_055, -2.120_263_536_200_091),
    (1.945_910_149_055_313_2, -3.473_768_074_496_991),
    (2.079_441_541_679_835_7, -4.199_705_077_879_927),
    (2.197_224_577_336_219_6, -4.980_591_172_747_879),
    (2.302_585_092_994_046, -5.760_352_826_144_595_5),
    (2.484_906_649_788_000_4, -7.371_379_301_263_834),
    (2.639_057_329_615_258_4, -9.036_387_064_852_745),
    (2.772_588_722_239_781, -10.738_198_297_417_86),
    (2.890_371_757_896_164_5, -12.470_038_191_364_639),
    (2.995_732_273_553_991, -14.229_511_997_094_725),
    (3.401_197_381_662_155_5, -23.285_917_835_359_264),
    (3.688_879_454_113_936_3, -32.602_916_581_708_875),
    (3.912_023_005_428_146, -42.066_428_392_713_18),
    (4.605_170_185_988_092, -90.377_072_055_856_23),
];
