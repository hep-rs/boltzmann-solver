#![allow(dead_code)]

use special_functions::bessel;

mod data;

fn within_error(v: f64, e: f64) -> bool {
    // const ERROR_ABS: f64 = 1e-20;
    // const ERROR_REL: f64 = 1e-1;
    const ERROR_ABS: f64 = f64::INFINITY;
    const ERROR_REL: f64 = f64::INFINITY;

    e.abs() < ERROR_ABS || e.abs() < ERROR_REL * v.abs()
}

/// Adaptive integration with Gauss quadrature and anti-Gauss extension with
/// weight function `$w(x) = K_1(\sqrt{x}) / \sqrt{x}$` over the interval `$[a,
/// \infty)$` for `$a \geq 0$`.
///
/// Note that the `$w(x) \sim x^{-1}$` as `$x \to 0$`, therefore if the lower
/// bound of the integral is 0, the integrand should behave as `$f(x) \sim x$`
/// as `$x \to 0$`.
///
/// In order to avoid having to compute the quadrature for every possible value
/// of `$a$`, the weights have been precomputed powers of 10 only and the
/// remaining interval is integrated with another method.
#[allow(clippy::cast_possible_truncation)]
#[allow(clippy::cast_sign_loss)]
#[allow(clippy::cast_possible_wrap)]
pub fn bessel<F>(f: F, a: f64) -> (f64, f64)
where
    F: Fn(f64) -> f64,
{
    debug_assert!(
        a >= 0.0,
        "The Bessel-weighted integral must have a non-negative lower bound."
    );

    if a == 0.0 {
        let (mut integral, mut error) = (0.0, 0.0);

        for [xi, wi, ei] in data::BESSEL_ZERO {
            let fi = f(xi);
            if !fi.is_finite() {
                continue;
            }
            integral += fi * wi;
            error += fi * ei;
        }

        // If we are within the error already, we are done.  Otherwise, we
        // integral [0, 1] using a Gauss-Legendre quadrature and [1, ∞) with a
        // Gauss-BesselK quadrature.
        if within_error(integral, error) {
            (integral, error)
        } else {
            let (i1, e1) = legendre(
                |x| {
                    let sqrt = x.sqrt();
                    f(x) * bessel::k1(sqrt) / sqrt
                },
                0.0,
                1.0,
            );
            let (i2, e2) = bessel(f, 1.0);
            (i1 + i2, e1.abs() + e2.abs())
        }
    } else {
        // We compute `b` as the next power of 10 greater than `a`.  We then
        // compute the integral from `[b, ∞)` with the precomputed quadrature,
        // and `[a, b]` a shifted Legendre quadrature (and the weight
        // specified).
        let p = a.log10().ceil() as i32;
        let b = 10_f64.powi(p);
        let data: &[[f64; 3]] = if p as usize >= data::BESSEL_POS.len() {
            &[]
        } else if p >= 0 {
            &data::BESSEL_POS[p as usize]
        } else {
            &data::BESSEL_NEG[(-p) as usize]
        };

        // Integrate the [a, b] interval with Gauss-Legendre quadrature
        #[allow(clippy::float_cmp)]
        let (i1, e1) = if a == b {
            (0.0, 0.0)
        } else {
            legendre(
                |x| {
                    let sqrt = x.sqrt();
                    f(x) * bessel::k1(sqrt) / sqrt
                },
                a,
                b,
            )
        };

        let (mut integral, mut error) = (0.0, 0.0);
        for &[xi, wi, ei] in data {
            let fi = f(xi);
            if !fi.is_finite() {
                continue;
            }
            integral += fi * wi;
            error += fi * ei;
        }

        // If the Gauss-Bessel integration is within the error, we are done and
        // we return.  Otherwise, we recurse and use larger lower bound.
        if within_error(integral, error) {
            (integral + i1, error.abs() + e1.abs())
        } else {
            let (i2, e2) = legendre(
                |x| {
                    let sqrt = x.sqrt();
                    f(x) * bessel::k1(sqrt) / sqrt
                },
                b,
                100.0 * b,
            );
            let (i3, e3) = bessel(f, 100.0 * b);
            (i1 + i2 + i3, e1.abs() + e2.abs() + e3.abs())
        }
    }
}

/// Adaptive integration with Gauss quadrature and Kronrod extension with weight
/// function w(x) = 1 over the interval `$[0, 1]$`.
///
/// The integration bounds `a` and `b` must be finite.
#[allow(clippy::shadow_unrelated)]
pub fn legendre<F>(f: F, a: f64, b: f64) -> (f64, f64)
where
    F: Fn(f64) -> f64,
{
    debug_assert!(
        a.is_finite() && b.is_finite(),
        "The integration bounds of the Gauss-Kronrod integration must be finite."
    );

    let mut divs: Vec<(f64, f64, usize)> = vec![(a, b, 0)];
    let (mut integral, mut error) = (0.0, 0.0);

    while !divs.is_empty() {
        let (a, b, n) = divs.pop().unwrap();
        let (i, e) = legendre_fixed(&f, a, b, 29);

        if !within_error(i, e) && n < 5 {
            divs.push((a, (a + b) / 2.0, n + 1));
            divs.push(((a + b) / 2.0, b, n + 1));
        } else {
            integral += i;
            error += e.abs();
        }
    }

    (integral, error)
}

fn legendre_fixed<F>(f: F, a: f64, b: f64, n: usize) -> (f64, f64)
where
    F: Fn(f64) -> f64,
{
    let scaling = b - a;
    let mut integral = 0.0;
    let mut err = 0.0;

    let data: &[[f64; 3]] = match n {
        2 => &data::SHIFTED_LEGENDRE_2,
        3 => &data::SHIFTED_LEGENDRE_3,
        4 => &data::SHIFTED_LEGENDRE_4,
        5 => &data::SHIFTED_LEGENDRE_5,
        6 => &data::SHIFTED_LEGENDRE_6,
        7 => &data::SHIFTED_LEGENDRE_7,
        8 => &data::SHIFTED_LEGENDRE_8,
        9 => &data::SHIFTED_LEGENDRE_9,
        10 => &data::SHIFTED_LEGENDRE_10,
        11 => &data::SHIFTED_LEGENDRE_11,
        12 => &data::SHIFTED_LEGENDRE_12,
        13 => &data::SHIFTED_LEGENDRE_13,
        14 => &data::SHIFTED_LEGENDRE_14,
        15 => &data::SHIFTED_LEGENDRE_15,
        16 => &data::SHIFTED_LEGENDRE_16,
        17 => &data::SHIFTED_LEGENDRE_17,
        18 => &data::SHIFTED_LEGENDRE_18,
        19 => &data::SHIFTED_LEGENDRE_19,
        20 => &data::SHIFTED_LEGENDRE_20,
        21 => &data::SHIFTED_LEGENDRE_21,
        22 => &data::SHIFTED_LEGENDRE_22,
        23 => &data::SHIFTED_LEGENDRE_23,
        24 => &data::SHIFTED_LEGENDRE_24,
        25 => &data::SHIFTED_LEGENDRE_25,
        26 => &data::SHIFTED_LEGENDRE_26,
        27 => &data::SHIFTED_LEGENDRE_27,
        28 => &data::SHIFTED_LEGENDRE_28,
        29 => &data::SHIFTED_LEGENDRE_29,
        30 => &data::SHIFTED_LEGENDRE_30,
        _ => panic!("Unsupported quadrature."),
    };

    for [xi, wi, ei] in data {
        let xi = a + xi * scaling;
        let fi = f(xi);
        if !fi.is_finite() {
            continue;
        }
        integral += fi * wi;
        err += fi * ei;
    }

    (integral * scaling, err * scaling)
}

#[allow(clippy::too_many_lines)]
#[cfg(test)]
mod tests {
    use crate::utilities::test::approx_eq;
    use itertools::iproduct;
    use ndarray::prelude::*;
    use std::error;

    /// Basic test with a polynomial.
    #[allow(clippy::cast_precision_loss)]
    #[test]
    fn legendre_polynomial() -> Result<(), Box<dyn error::Error>> {
        // We are computing the integral ∫ axⁿ + bxⁿ⁻² dx over the interval [a,
        // b], which has a closed form result.

        for (&a, &b, n) in iproduct!(
            Array1::geomspace(1e-10, 1e10, 50).unwrap().iter(),
            Array1::geomspace(1e-10, 1e10, 50).unwrap().iter(),
            [2, 3, 4, 5, 6, 7, 8, 9, 10]
        ) {
            let f = |x: f64| a * x.powi(n) + b * x.powi(n - 2);
            let result = a * (b.powi(n + 1) - a.powi(n + 1)) / f64::from(n + 1)
                + (b * a.powi(n) - a * b.powi(n)) / (a * f64::from(1 - n));

            approx_eq(super::legendre(f, a, b).0, result, 1e-13, 0.0)?;
        }

        Ok(())
    }

    /// Integrand that is difficult to approximate with a polynomial
    #[test]
    fn legendre_hard() -> Result<(), Box<dyn error::Error>> {
        let f = |x: f64| 1.0 - (-x.powi(-2)).exp();

        for [a, b, result] in [
            [
                -12.903_785_298_585_522,
                2.197_511_766_273_233_7,
                3.027_506_863_024_56,
            ],
            [
                -11.977_540_002_103_034,
                14.234_331_740_966_71,
                3.391_320_010_635_534_6,
            ],
            [
                -11.627_673_552_470_192,
                12.956_012_760_689_156,
                3.381_904_139_451_550_3,
            ],
            [
                -18.249_395_219_665_54,
                5.838_889_832_682_994_6,
                3.319_705_706_672_203_3,
            ],
            [
                -10.772_576_631_967_61,
                18.518_412_325_630_67,
                3.398_238_407_970_447,
            ],
            [
                -14.773_625_890_046_34,
                18.997_973_241_584_646,
                3.424_658_251_415_384_5,
            ],
            [
                -2.064_577_311_568_321_2,
                18.716_679_199_099_93,
                3.025_230_381_109_584_4,
            ],
            [
                -0.333_364_019_284_523_75,
                1.640_713_679_080_914,
                1.531_432_700_323_844_8,
            ],
            [
                -4.287_964_806_362_133,
                1.030_134_361_965_569,
                2.470_978_192_859_947,
            ],
            [
                -2.742_144_061_590_650_5,
                16.189_986_316_839_29,
                3.126_375_337_437_232_3,
            ],
            [
                -18.865_987_363_958_197,
                8.128_657_038_880_224,
                3.369_214_885_690_035_5,
            ],
            [
                -9.467_384_024_320_232,
                4.106_679_726_906_02,
                3.198_350_362_396_362_3,
            ],
            [
                -18.509_209_715_528_282,
                3.713_856_383_682_344_4,
                3.224_852_013_016_937,
            ],
            [
                -9.704_479_523_875_001,
                8.849_191_869_249_594,
                3.329_279_710_289_785,
            ],
            [
                -1.071_435_441_408_226_6,
                7.142_221_808_691_794,
                2.587_147_746_873_294_6,
            ],
            [
                -18.837_047_242_575_146,
                2.839_807_116_251_656,
                3.146_810_092_729_703_4,
            ],
            [
                -12.488_161_847_251_348,
                1.995_197_159_879_268_2,
                2.983_689_118_885_936_7,
            ],
            [
                -10.094_609_736_031_597,
                5.224_707_517_802_713,
                3.255_768_450_638_592,
            ],
            [
                -10.988_415_508_738_978,
                5.936_012_734_273_582,
                3.286_357_255_218_376,
            ],
            [
                -14.912_737_058_600_996,
                9.979_302_399_858_092,
                3.377_861_104_306_007_6,
            ],
            [
                -15.533_779_538_858_813,
                4.993_387_958_898_158,
                3.281_639_440_795_329_3,
            ],
            [
                -8.483_789_310_317_192,
                5.804_716_650_007_84,
                3.255_881_436_714_141,
            ],
            [
                -8.878_846_667_378_436,
                9.570_118_146_501_457,
                3.328_215_787_139_148,
            ],
            [
                -17.153_659_002_794_335,
                7.555_801_432_415_656,
                3.354_680_489_113_803,
            ],
            [
                -13.071_207_436_017_247,
                1.912_331_119_307_673,
                2.968_145_843_936_754_5,
            ],
            [
                -2.550_920_496_503_558,
                1.525_626_444_018_595_2,
                2.550_356_727_956_951_5,
            ],
            [
                -0.184_228_618_726_585_58,
                5.873_779_899_593_245,
                1.787_252_028_119_686_6,
            ],
            [
                -14.174_608_330_579_698,
                8.501_963_770_586_507,
                3.357_068_045_980_809_3,
            ],
            [
                -11.798_538_948_961_781,
                5.418_698_471_382_051,
                3.276_747_045_965_713_3,
            ],
            [
                -4.558_739_361_032_003_5,
                4.283_190_496_093_962,
                3.095_918_533_092_866,
            ],
            [
                -2.891_324_201_215_702_8,
                11.629_892_835_394_72,
                3.119_899_774_399_186,
            ],
            [
                -12.746_985_620_887_706,
                6.601_212_157_673_721_5,
                3.315_627_572_813_590_4,
            ],
            [
                -8.162_353_400_391_392,
                13.381_544_028_251_106,
                3.348_039_264_534_07,
            ],
            [
                -19.887_962_371_093_483,
                12.172_589_327_775_263,
                3.412_587_698_080_876,
            ],
            [
                -12.863_048_710_070_348,
                8.766_240_477_438,
                3.353_416_625_738_002,
            ],
            [
                -16.897_582_067_468_633,
                10.967_807_111_157_551,
                3.394_712_343_639_143,
            ],
            [
                -9.131_430_294_791_14,
                19.509_963_400_672_41,
                3.384_380_770_644_441_8,
            ],
            [
                -5.377_707_659_817_311,
                2.040_029_304_177_238_6,
                2.888_556_603_906_457_6,
            ],
            [
                -5.164_769_337_654_597,
                18.256_881_142_324_374,
                3.297_742_457_732_732,
            ],
            [
                -15.261_385_164_419_945,
                5.356_918_401_704_995,
                3.293_831_886_612_639_3,
            ],
            [
                -7.087_813_351_281_653,
                8.900_370_242_181_395,
                3.292_167_594_946_458_4,
            ],
            [
                -8.665_939_530_211_997,
                9.934_054_288_166_067,
                3.329_274_648_978_214,
            ],
            [
                -8.527_262_694_895_697,
                18.596_791_421_495_304,
                3.374_158_013_734_804,
            ],
            [
                -18.515_748_127_061_432,
                5.222_965_142_612_956,
                3.300_624_979_847_004_4,
            ],
            [
                -17.622_985_601_889_28,
                2.351_302_178_170_687_5,
                3.075_269_617_140_038,
            ],
            [
                -2.549_677_951_678_134_5,
                15.082_414_927_791_397,
                3.096_201_655_756_151_4,
            ],
            [
                -3.576_767_902_665_466,
                4.431_459_123_227_924,
                3.045_148_369_111_146_3,
            ],
            [
                -11.564_959_343_216_206,
                8.200_459_361_901_402,
                3.336_904_138_932_856,
            ],
            [
                -11.961_070_836_526_218,
                15.943_456_201_253_923,
                3.398_719_841_322_415,
            ],
            [
                -6.366_093_519_876_415,
                15.902_433_164_218_117,
                3.325_626_271_951_852,
            ],
            [
                -19.094_010_310_958_307,
                17.099_169_555_846_508,
                3.434_110_127_457_104,
            ],
            [
                -2.309_833_905_603_113_6,
                10.697_406_143_811_676,
                3.031_665_011_423_075,
            ],
            [
                -11.724_642_098_887_692,
                15.009_056_585_576_921,
                3.393_143_318_810_774_5,
            ],
            [
                -16.984_569_343_342_024,
                18.247_771_060_225_8,
                3.431_290_922_693_553_3,
            ],
            [
                -10.633_924_881_926_376,
                4.882_688_106_684_966_6,
                3.247_622_028_818_919_5,
            ],
            [
                -9.470_280_348_856_97,
                6.015_782_042_670_075,
                3.274_041_909_255_409,
            ],
            [
                -19.967_935_973_260_378,
                10.358_359_224_281_34,
                3.398_457_631_256_369_5,
            ],
            [
                -19.960_062_378_232_358,
                15.102_498_514_442_7,
                3.428_662_738_314_218_7,
            ],
            [
                -10.555_503_089_743_915,
                19.496_550_466_307_14,
                3.399_043_201_385_031,
            ],
            [
                -4.821_295_178_154_55,
                3.040_393_843_671_175_5,
                3.015_868_458_358_294_6,
            ],
            [
                -18.843_083_645_620_7,
                12.524_539_015_644_692,
                3.412_104_195_553_099_3,
            ],
            [
                -9.453_515_313_300_706,
                17.210_525_556_716_505,
                3.381_252_472_074_625_5,
            ],
            [
                -10.021_525_028_289_915,
                4.290_073_931_195_458,
                3.214_279_657_918_9,
            ],
            [
                -10.878_316_005_807_562,
                14.805_365_601_744_05,
                3.385_619_187_551_754_7,
            ],
            [
                -13.606_933_572_853_425,
                17.998_929_427_796_632,
                3.415_951_547_669_871,
            ],
            [
                -14.455_744_175_881_641,
                11.571_824_312_974_286,
                3.389_476_769_121_464_5,
            ],
            [
                -3.777_472_393_587_715,
                0.932_011_174_622_360_3,
                2.376_987_319_710_485,
            ],
            [
                -10.978_632_966_074_642,
                3.703_953_459_689_138_6,
                3.187_198_267_366_931,
            ],
            [
                -16.451_832_821_745_242,
                5.915_700_608_718_225,
                3.315_920_402_599_686_2,
            ],
            [
                -4.308_814_276_653_003,
                9.531_164_281_861_39,
                3.210_159_567_928_259,
            ],
            [
                -0.269_939_446_362_613_47,
                16.677_457_792_429_11,
                1.982_468_014_752_215_3,
            ],
            [
                -9.404_435_462_002_87,
                12.817_623_305_788_16,
                3.360_836_288_555_835,
            ],
            [
                -9.505_761_343_223_273,
                3.356_359_304_891_334_7,
                3.146_291_055_844_141_5,
            ],
            [
                -14.121_560_095_986_47,
                13.726_531_943_670_523,
                3.401_365_880_109_671_6,
            ],
            [
                -4.195_775_087_819_74,
                13.237_383_516_169_004,
                3.233_331_859_063_464_5,
            ],
            [
                -2.728_699_629_631_528,
                17.173_998_306_178_66,
                3.128_226_095_170_888_7,
            ],
            [
                -0.056_410_743_045_830_714,
                13.529_334_828_397_872,
                1.755_018_357_367_464_3,
            ],
            [
                -14.853_561_629_025_638,
                0.127_941_816_770_594_13,
                1.833_122_558_989_057,
            ],
            [
                -18.258_747_766_289_91,
                3.120_962_614_822_868_6,
                3.175_124_847_532_129_6,
            ],
            [
                -0.640_081_513_676_960_9,
                7.287_138_207_331_342,
                2.268_103_211_489_150_6,
            ],
            [
                -9.933_268_138_234_652,
                11.643_296_588_039_256,
                3.358_624_709_451_601_3,
            ],
            [
                -2.748_330_822_323_19,
                17.411_624_498_056_767,
                3.131_470_118_594_387,
            ],
            [
                -19.969_872_086_654_274,
                16.767_608_052_863_18,
                3.435_249_715_662_448,
            ],
            [
                -14.960_545_445_017_107,
                1.501_658_395_756_507_5,
                2.857_361_644_990_038_8,
            ],
            [
                -17.806_472_819_097_134,
                18.663_254_233_872_586,
                3.435_222_249_441_541_6,
            ],
            [
                -13.556_363_704_871_295,
                14.557_683_741_734_607,
                3.402_570_158_669_928_6,
            ],
            [
                -3.873_552_119_599_480_6,
                5.998_708_448_847_253,
                3.123_641_846_846_292,
            ],
            [
                -6.689_903_117_327_091,
                2.228_889_315_220_339_3,
                2.961_795_722_903_212_4,
            ],
            [
                -10.956_817_978_985_512,
                12.657_515_202_228_332,
                3.374_844_459_609_487,
            ],
            [
                -16.696_967_750_589_526,
                0.687_340_188_201_019_9,
                2.387_416_353_570_550_6,
            ],
            [
                -2.742_228_452_390_534_7,
                6.632_512_412_195_481_5,
                3.037_909_396_390_844_6,
            ],
            [
                -10.660_333_089_775_62,
                7.827_180_040_336_916,
                3.323_825_832_569_832,
            ],
            [
                -6.395_124_436_467_213_5,
                7.695_904_643_484_592,
                3.259_597_896_676_046_6,
            ],
            [
                -1.137_388_425_553_673_7,
                1.618_732_208_316_586_7,
                2.182_335_226_394_508_6,
            ],
            [
                -9.630_356_730_983_614,
                13.358_950_394_064_635,
                3.366_469_241_270_578,
            ],
            [
                -11.426_007_670_620_024,
                15.321_478_367_297_601,
                3.392_278_072_944_052_7,
            ],
            [
                -11.189_765_249_912_966,
                10.261_344_352_665_574,
                3.358_359_931_748_205,
            ],
            [
                -13.674_211_272_837_383,
                0.347_820_371_795_819_5,
                2.047_204_334_945_726,
            ],
            [
                -7.682_012_481_918_072,
                10.124_528_561_550_491,
                3.316_490_126_554_62,
            ],
            [
                -16.504_427_621_062_028,
                5.749_710_542_621_091_5,
                3.311_304_690_738_54,
            ],
        ] {
            approx_eq(super::legendre(f, a, b).0, result, 1e-10, 0.0)?;
        }

        Ok(())
    }

    /// Basic test with a polynomial.
    #[allow(clippy::cast_precision_loss)]
    #[test]
    fn bessel_polynomial() -> Result<(), Box<dyn error::Error>> {
        // We are computing the integral ∫ axⁿ + bxⁿ⁻² dx over the interval [a,
        // b], which has a closed form result.

        for (n, a, b, c, result) in [
            (
                3,
                -7.997_762_956_391_477,
                12.047_816_652_941_26,
                0.,
                -6_094.090_795_668_420_5,
            ),
            (
                10,
                -16.532_467_187_926_47,
                17.854_656_812_702_835,
                0.,
                -2.282_754_064_063_632_6e19,
            ),
            (
                3,
                -1.125_660_248_692_277_5,
                12.190_323_546_668_637,
                0.,
                -815.745_792_543_192_4,
            ),
            (
                8,
                -15.982_102_327_137_072,
                0.127_542_460_492_022_67,
                0.,
                -2.128_456_630_307_883_4e14,
            ),
            (
                3,
                -17.454_237_122_099_254,
                5.138_856_313_780_003,
                0.,
                -13_384.298_928_440_72,
            ),
            (
                6,
                -7.431_595_212_113_844,
                8.901_331_840_005_4,
                0.,
                -2.629_671_789_936_951_6e9,
            ),
            (
                10,
                -8.988_089_137_514_947,
                12.650_790_360_560_606,
                0.,
                -1.241_044_785_192_720_8e19,
            ),
            (
                8,
                -4.875_893_245_408_394_5,
                0.062_406_019_778_625_026,
                0.,
                -6.493_592_498_392_401e13,
            ),
            (
                8,
                -4.788_577_965_662_365,
                1.197_177_756_749_682_6,
                0.,
                -6.377_267_997_315_344_5e13,
            ),
            (
                10,
                -14.494_431_537_209_552,
                0.371_263_614_004_409_94,
                0.,
                -2.001_368_495_199_477_8e19,
            ),
            (
                8,
                -12.709_231_093_466_162,
                2.128_796_944_117_253,
                4.630_918_320_969_416e-13,
                -1.692_576_606_353_373_4e14,
            ),
            (
                4,
                -0.653_598_624_575_504_9,
                3.145_548_084_786_424,
                4.364_895_955_907_814e-19,
                -23_993.602_157_638_245,
            ),
            (
                2,
                -12.805_802_569_569_742,
                9.557_787_929_981_345,
                8.926_811_452_841_948e-18,
                -32.354_988_649_920_91,
            ),
            (
                6,
                -19.530_190_799_356_003,
                0.632_553_848_847_687_1,
                1.919_675_598_053_691_6e-10,
                -6.911_601_836_358_53e9,
            ),
            (
                3,
                -6.890_446_016_232_964,
                3.508_089_460_376_694,
                0.002_080_744_980_694_632,
                -5_277.837_467_029_771,
            ),
            (
                7,
                -12.993_328_540_485_9,
                14.381_005_353_244_314,
                1.200_522_367_797_098_8e-12,
                -7.724_663_116_062_99e11,
            ),
            (
                4,
                -10.879_794_184_337_282,
                16.674_103_669_188_177,
                1.966_308_185_818_319_7e-12,
                -400_539.161_493_995_6,
            ),
            (
                8,
                -15.363_628_491_141_968,
                17.485_718_518_954_76,
                1.980_569_879_164_153_5e-17,
                -2.046_028_376_286_647e14,
            ),
            (
                9,
                -13.290_004_332_480_084,
                17.188_822_664_597_115,
                1.124_218_641_633_231e-18,
                -5.097_296_469_135_959e16,
            ),
            (
                8,
                -19.294_457_235_499_276,
                0.945_496_592_094_355,
                5.305_826_245_808_308_5e-11,
                -2.569_585_015_930_532_5e14,
            ),
            (
                5,
                -17.653_982_407_048_762,
                0.280_816_926_035_010_8,
                7.860_483_794_095_733e-8,
                -5.206_349_692_887_644_5e7,
            ),
            (
                7,
                -11.905_412_548_659_012,
                1.653_963_762_747_349_8,
                3.788_542_243_631_829e-14,
                -7.078_226_058_132_936e11,
            ),
            (
                6,
                -4.401_802_131_635_977,
                4.988_450_634_936_299,
                2.820_086_506_686_829_7e-6,
                -1.557_589_230_049_828_8e9,
            ),
            (
                6,
                -14.306_010_956_971_333,
                9.008_234_180_192_88,
                3.088_840_511_828_470_7e-6,
                -5.062_485_084_465_977e9,
            ),
            (
                6,
                -17.165_953_167_407_462,
                7.807_942_641_858_564,
                0.000_222_898_202_292_739_84,
                -6.074_646_864_610_213e9,
            ),
            (
                5,
                -5.955_971_967_252_135,
                7.988_917_213_907_45,
                0.660_581_627_413_715,
                -1.755_874_101_782_585_3e7,
            ),
            (
                5,
                -16.625_117_598_374_98,
                0.135_714_388_910_227_52,
                3.347_214_957_803_231_6e-10,
                -4.902_936_258_306_894_5e7,
            ),
            (
                4,
                -12.455_268_303_908_456,
                13.009_115_211_372_93,
                0.052_698_111_043_180_604,
                -458_734.736_389_440_4,
            ),
            (
                7,
                -7.532_112_567_324_657,
                4.855_471_131_076_161,
                3_234.055_946_460_491,
                -2.435_296_785_023_532,
            ),
            (
                8,
                -0.915_688_405_391_179_3,
                16.806_392_960_936_74,
                217.320_217_586_281_25,
                -7.811_794_286_731_866e12,
            ),
        ] {
            let f = |x: f64| a * x.powi(n) + b * x.powi(n - 2);

            approx_eq(super::bessel(f, c).0, result, 1e-13, 0.0)?;
        }

        Ok(())
    }

    // Integrand that is difficult to approximate with a polynomial
    #[test]
    fn bessel_hard() -> Result<(), Box<dyn error::Error>> {
        let f = |x: f64| x * (1.0 - (-x.powi(-2)).exp());

        for [a, result] in [
            [0., 1.014_425_530_433_720_9],
            [1.418_750_355_722_789_2, 0.202_732_047_352_110_3],
            [0.001_867_017_759_221_036_6, 1.012_562_011_764_809_5],
            [0.000_361_951_804_278_779_54, 1.014_063_741_639_679_8],
            [20_558.420_789_947_217, 5.388_579_194_735_642e-68],
            [1.049_192_987_193_100_6e-10, 1.014_425_530_328_806_8],
            [1.753_996_199_638_041_6e-15, 1.014_425_530_433_718_9],
            [3.254_416_240_108_983_3e-13, 1.014_425_530_433_395_1],
            [0.247_962_672_919_376_9, 0.791_205_628_378_632_5],
            [4.899_594_739_867_522e-11, 1.014_425_530_384_727_2],
            [1.290_724_575_132_884_4e-15, 1.014_425_530_433_719_7],
            [2.563_117_256_896_647_4e-20, 1.014_425_530_433_720_9],
            [8.886_332_531_410_866e-13, 1.014_425_530_432_832_2],
            [0.007_391_623_741_380_787, 1.007_079_288_407_103_6],
            [6.687_121_199_249_394e-12, 1.014_425_530_427_034_2],
            [2.864_056_474_916_931, 0.063_600_328_017_155_32],
            [2.851_885_434_262_242_6e-7, 1.014_425_245_259_417_1],
            [1.148_867_351_792_530_7, 0.270_459_641_250_100_7],
            [0.003_427_696_689_696_968_4, 1.011_008_722_311_051_8],
            [0.126_928_233_270_080_9, 0.895_251_617_267_763_5],
            [0.000_378_877_759_386_281_95, 1.014_046_830_049_492],
        ] {
            approx_eq(super::bessel(f, a).0, result, 1e-13, 0.0)?;
        }

        Ok(())
    }

    // Integrand that is difficult to approximate with a polynomial
    #[test]
    fn bessel_rational() -> Result<(), Box<dyn error::Error>> {
        let f = |x: f64| x / (x + 1.0) / (x + 5.0);

        for [a, result] in [
            [0., 0.171_555_140_654_753_72],
            [1.272_822_928_308_596_7e-12, 0.171_555_140_654_499_2],
            [2.850_160_345_652_885_7e-11, 0.171_555_140_649_053_75],
            [0.002_197_385_507_848_560_6, 0.171_117_189_747_211],
            [48.509_286_847_905_29, 0.000_013_225_904_840_739_458],
            [4.136_663_257_376_664e-12, 0.171_555_140_653_926_52],
            [2.716_385_669_640_544_8e-12, 0.171_555_140_654_210_54],
            [2.318_244_355_947_493_6e-18, 0.171_555_140_654_753_72],
            [0.036_907_860_187_434_64, 0.164_500_211_534_071_96],
            [116.472_418_894_200_52, 1.093_004_810_042_360_8e-7],
            [1.234_432_286_374_753_8e-6, 0.171_554_893_781_085_13],
            [5.992_257_831_153_864e-19, 0.171_555_140_654_753_72],
            [1.127_344_740_239_814_4e-13, 0.171_555_140_654_731_2],
            [1.357_021_562_697_438_7e-17, 0.171_555_140_654_753_72],
            [0.000_047_071_469_311_458_51, 0.171_545_727_610_035_73],
            [5.333_856_256_863_844e-17, 0.171_555_140_654_753_77],
            [4_327.831_766_028_302, 1.857_842_520_264_377_2e-33],
            [2.086_641_946_625_475_2e-16, 0.171_555_140_654_753_72],
            [0.000_030_398_001_998_903_778, 0.171_549_061_682_843_76],
            [1.643_982_117_235_628_5e-17, 0.171_555_140_654_753_77],
            [6_096.363_909_991_232_5, 5.578_086_169_885_824e-39],
        ] {
            approx_eq(super::bessel(f, a).0, result, 1e-13, 0.0)?;
        }

        Ok(())
    }
}
