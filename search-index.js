var N = null;var searchIndex = {};
searchIndex["boltzmann_solver"]={"doc":"`boltzmann-solver` is a library allowing for Boltzmann equation in the context of particle physics / early cosmology.  It provides functionalities to solve Boltzmann equation in the case where a single species is out of equilibrium, as well as functionalities to solve the Boltzmann equations more general when multiple species are all out of equilibrium.","items":[[0,"constants","boltzmann_solver","Collection of physical and mathematical constants which appear frequently.",N,N],[17,"PLANCK_MASS","boltzmann_solver::constants","Planck mass, \\(M_{\\text{Pl}} = \\sqrt{\\hbar c / G}\\), in units of GeV / \\(c^2\\).",N,N],[17,"REDUCED_PLANCK_MASS","","Reduced Planck mass, \\(m_{\\text{Pl}} = \\sqrt{\\hbar c / 8 \\pi G}\\), in units of GeV / \\(c^2\\).",N,N],[17,"ZETA_3","","Riemann zeta function evaluated at 3: \\(\\zeta(3) \\approx 1.202\\dots\\)",N,N],[17,"PI","","\\(\\pi\\)",N,N],[17,"PI_1","","\\(\\pi\\) [named to follow the convention `PI_n`]",N,N],[17,"PI_2","","\\(\\pi^2\\)",N,N],[17,"PI_3","","\\(\\pi^3\\)",N,N],[17,"PI_4","","\\(\\pi^4\\)",N,N],[17,"PI_M1","","\\(\\pi^{-1}\\)",N,N],[17,"PI_M2","","\\(\\pi^{-2}\\)",N,N],[17,"PI_M3","","\\(\\pi^{-3}\\)",N,N],[17,"PI_M4","","\\(\\pi^{-4}\\)",N,N],[0,"particle","boltzmann_solver","Basic implementation of a particle type",N,N],[3,"Particle","boltzmann_solver::particle","Particle type",N,N],[12,"spin","","The spin is stored as twice the spin, so a spin-½ particle has `spin == 1` and a spin-1 particle has `spin == 2`",0,N],[12,"mass","","Mass of the particle in GeV",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["particle"]]],[11,"new","","Create a new particle with the specified spin and mass.",0,[[["u8"],["f64"]],["self"]]],[11,"set_complex","","Indicate that the particle is complex.",0,[[["self"]],["self"]]],[11,"set_dof","","Specify how many degrees of freedom this particle has.  This overwrites completely the default calculation (that is, the maximum degrees of freedom will be independent of the spin of the particle and whether it is complex or not).",0,[[["self"],["f64"]],["self"]]],[11,"is_complex","","Returns true if the particle is complex.",0,[[["self"]],["bool"]]],[11,"is_bosonic","","Returns true if the particle is bosonic.",0,[[["self"]],["bool"]]],[11,"is_fermionic","","Returns true if the particle is fermionic.",0,[[["self"]],["bool"]]],[11,"degrees_of_freedom","","Return the number of degrees of freedom for the underlying particle.",0,[[["self"]],["f64"]]],[11,"phase_space","","Return the equilibrium phase space occupation of the particle.",0,[[["self"],["f64"],["f64"],["f64"]],["f64"]]],[11,"number_density","","Return the equilibrium number density of the particle.",0,[[["self"],["f64"],["f64"]],["f64"]]],[11,"entropy_dof","","",0,[[["self"],["f64"]],["f64"]]],[0,"solver","boltzmann_solver","Solvers for the Boltzmann equation, or sets of Boltzmann equations",N,N],[0,"number_density","boltzmann_solver::solver","Solver for the number density evolution given by integrating the Boltzmann equation.",N,N],[3,"Context","boltzmann_solver::solver::number_density","Context provided containing pre-computed values which might be useful when evaluating interactions.",N,N],[12,"beta","","Inverse temperature in GeV^{-1}",1,N],[12,"hubble_rate","","Hubble rate, in GeV",1,N],[12,"eq_n","","Equilibrium number densities for the particles.  This is provided in the same order as specified to the solver",1,N],[12,"eq_boson","","Equilibrium number density for massless bosons.  This is specified per degree of freedom (that is \\(g = 1\\))",1,N],[12,"eq_fermion","","Equilibrium number density for massless fermions.  This is specified per degree of freedom (that is \\(g = 1\\))",1,N],[3,"NumberDensitySolver","","Boltzmann equation solver for the number density",N,N],[11,"normalize_to_photons","","Normalize the number densities to the photon number density during the calculations.  As a consequence, the effects from the expansion of the Universe are automatically taken into account.",2,[[["self"],["bool"]],["self"]]],[11,"new","","Create a new instance of the number density solver.",2,[[],["self"]]],[11,"beta_range","","Set the range of inverse temperature values over which the phase space is evolved.",2,[[["self"],["f64"],["f64"]],["self"]]],[11,"temperature_range","","Set the range of temperature values over which the phase space is evolved.",2,[[["self"],["f64"],["f64"]],["self"]]],[11,"step_change","","",2,[[["self"],["f64"],["f64"]],["self"]]],[11,"error_tolerance","","",2,[[["self"],["f64"],["f64"]],["self"]]],[11,"initialize","","",2,[[["self"]],["self"]]],[11,"add_particle","","",2,[[["self"],["particle"]]]],[11,"add_particles","","",2,[[["self"],["i"]]]],[11,"add_interaction","","",2,[[["self"],["f"]],["self"]]],[11,"solve","","",2,N],[11,"default","","",2,[[],["self"]]],[0,"phase_space","boltzmann_solver::solver","Solver for the phase-space form of the Boltzmann equation.",N,N],[3,"Context","boltzmann_solver::solver::phase_space","Context provided containing pre-computed values which might be useful when evaluating interactions.",N,N],[12,"beta","","Inverse temperature in GeV^{-1}",3,N],[12,"hubble_rate","","Hubble rate, in GeV",3,N],[12,"eq_f","","Equilibrium phase spaces for the particles.  The first axis has the particles and follows the same order as specified to the solver.  The second axis has the energies",3,N],[12,"eq_boson","","Equilibrium phase space for massless bosons.  This is specified per degree of freedom (that is \\(g = 1\\))",3,N],[12,"eq_fermion","","Equilibrium phase space for massless fermions.  This is specified per degree of freedom (that is \\(g = 1\\))",3,N],[3,"PhaseSpaceSolver","","The solver holding all the information.",N,N],[11,"energy_steps","","Specify the number of energy steps to use in the energy lattice.",4,[[["self"],["usize"]],["self"]]],[11,"new","","",4,[[],["self"]]],[11,"beta_range","","",4,[[["self"],["f64"],["f64"]],["self"]]],[11,"temperature_range","","",4,[[["self"],["f64"],["f64"]],["self"]]],[11,"step_change","","",4,[[["self"],["f64"],["f64"]],["self"]]],[11,"error_tolerance","","",4,[[["self"],["f64"],["f64"]],["self"]]],[11,"initialize","","",4,[[["self"]],["self"]]],[11,"add_particle","","",4,[[["self"],["particle"]]]],[11,"add_particles","","",4,[[["self"],["i"]]]],[11,"add_interaction","","",4,[[["self"],["f"]],["self"]]],[11,"solve","","",4,N],[11,"default","","",4,[[],["self"]]],[8,"Solver","boltzmann_solver::solver","Common interface for the Boltzmann equation solvers.",N,N],[16,"Solution","","The final solution by the solver.  This will typically be an array for values with the ordering corresponding to the way `add_particle` was invoked.",5,N],[16,"Context","","Context containing relevant information precomputed by the solver which can be used in the calculation of the interactions.",5,N],[10,"new","","Create a new instance of the solver.",5,[[],["self"]]],[10,"beta_range","","Set the range of inverse temperature values over which the phase space is evolved.",5,[[["self"],["f64"],["f64"]],["self"]]],[10,"temperature_range","","Set the range of temperature values over which the phase space is evolved.",5,[[["self"],["f64"],["f64"]],["self"]]],[10,"step_change","","Specify the granularity of the way time evolution is done.",5,[[["self"],["f64"],["f64"]],["self"]]],[10,"error_tolerance","","Specify the local error tolerance.",5,[[["self"],["f64"],["f64"]],["self"]]],[10,"initialize","","Initialize the phase space solver.",5,[[["self"]],["self"]]],[10,"add_particle","","Add a particle species.",5,[[["self"],["particle"]]]],[10,"add_particles","","Add a multiple particles from a vector or slice.",5,[[["self"],["i"]]]],[10,"add_interaction","","Add an interaction.",5,[[["self"],["f"]],["self"]]],[10,"solve","","Evolve the initial conditions by solving the PDEs.",5,N],[0,"statistic","boltzmann_solver","If the rate of collisions between particles is sufficiently high (as is usually the case), the phase space distribution of the particles will quickly converge onto either the Fermi–Dirac statistic or the Bose–Einstein statistic depending on whether the particle is a half-integer or integer spin particle.",N,N],[4,"Statistic","boltzmann_solver::statistic","The statistics which describe the distribution of particles over energy states.  Both Fermi–Dirac and Bose–Einstein quantum statistics are implemented, as well as the classical Maxwell–Boltzmann statistic.",N,N],[13,"FermiDirac","","Fermi–Dirac statistic describing half-integer-spin particles:",6,N],[13,"BoseEinstein","","Bose–Einstein statistic describing integer-spin particles:",6,N],[13,"MaxwellBoltzmann","","Maxwell–Boltzmann statistic describing classical particles:",6,N],[13,"MaxwellJuttner","","Maxwell–Jüttner statistic describing relativistic classical particles:",6,N],[8,"Statistics","","Equilibrium statistics.",N,N],[10,"phase_space","","Evaluate the phase space distribution, for a given energy, mass, chemical potential and inverse temperature.",7,[[["self"],["f64"],["f64"],["f64"],["f64"]],["f64"]]],[11,"number_density","","Return number density for a particle following the specified statistic.",7,[[["self"],["f64"],["f64"],["f64"]],["f64"]]],[11,"massless_number_density","","Return number density for a massless particle following the specified statistic.",7,[[["self"],["f64"],["f64"]],["f64"]]],[11,"phase_space","","Evaluate the phase space distribution, \\(f\\) as defined above for the four statistics.",6,[[["self"],["f64"],["f64"],["f64"],["f64"]],["f64"]]],[11,"number_density","","Return number density for a particle following the specified statistic.",6,[[["self"],["f64"],["f64"],["f64"]],["f64"]]],[11,"massless_number_density","","Return number density for a massless particle following the specified statistic.",6,[[["self"],["f64"],["f64"]],["f64"]]],[0,"universe","boltzmann_solver","The effects of the Universe's evolution play an important role in the Boltzmann equation.  This information is provided by implementations of the [`Universe`] trait.",N,N],[3,"StandardModel","boltzmann_solver::universe","Implementation of [`Universe`] for the Standard Model.",N,N],[3,"SingleSpecies","","Contribution from a single particle in the Universe.",N,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"default","","",8,[[],["standardmodel"]]],[11,"clone","","",8,[[["self"]],["standardmodel"]]],[11,"new","","Create an instance of the Standard Model.",8,[[],["self"]]],[11,"entropy_dof","","",8,[[["self"],["f64"]],["f64"]]],[8,"Universe","","Collection of properties which determine the evolution of a Universe.",N,N],[10,"entropy_dof","","Return the effective degrees of freedom contributing to the entropy density of the Universe at the specified inverse temperature.",9,[[["self"],["f64"]],["f64"]]],[11,"hubble_rate","","Return the Hubble rate at the specified inverse temperature.",9,[[["self"],["f64"]],["f64"]]],[11,"new","","Create a new particle with the specified statistic, mass and degrees of freedom.",10,[[["statistic"],["f64"],["f64"]],["self"]]],[11,"entropy_dof","","",10,[[["self"],["f64"]],["f64"]]]],"paths":[[3,"Particle"],[3,"Context"],[3,"NumberDensitySolver"],[3,"Context"],[3,"PhaseSpaceSolver"],[8,"Solver"],[4,"Statistic"],[8,"Statistics"],[3,"StandardModel"],[8,"Universe"],[3,"SingleSpecies"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N]],"paths":[[4,"Either"]]};
searchIndex["itertools"]={"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[4,"Diff","","A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,N],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,N],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,N],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",N,N],[13,"NoElements","","Empty iterator",2,N],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,N],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,N],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",N,N],[13,"First","","This is the first element.",3,N],[13,"Middle","","This is neither the first nor the last element.",3,N],[13,"Last","","This is the last element.",3,N],[13,"Only","","This is the only element.",3,N],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",N,N],[13,"Both","","Both values are present.",4,N],[13,"Left","","Only the left value of type `A` is present.",4,N],[13,"Right","","Only the right value of type `B` is present.",4,N],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",N,[[["i"]],["flatten"]]],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",N,N],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",N,[[["i"]],["constuples"]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",N,[[["i"],["j"],["f"]],["option",["diff"]]]],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",N,[[["i"],["f"]],["result"]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",N,[[["f"]],["repeatcall"]]],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",N,[[["st"],["f"]],["unfold"]]],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",N,[[["st"],["f"]],["iterate"]]],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",N,[[["u"]],["zip"]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",N,[[["i"],["j"]],["interleave"]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",N,[[["i"],["j"]],["merge"]]],[5,"put_back","","Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zipeq"]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,[[["i"],["j"],["f"]],["mergejoinby"]]],[5,"enumerate","","Iterate `iterable` with a running index.",N,[[["i"]],["enumerate"]]],[5,"rev","","Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zip"]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",N,[[["i"],["j"]],["chain"]]],[5,"cloned","","Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold","","Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all","","Test whether the predicate holds for all elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"any","","Test whether the predicate holds for any elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"max","","Return the maximum value of the iterable.",N,[[["i"]],["option"]]],[5,"min","","Return the minimum value of the iterable.",N,[[["i"]],["option"]]],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",N,[[["i"],["j"]],["bool"]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",N,[[["i"],["j"]]]],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",N,[[["i"],["f"]],["usize"]]],[0,"structs","","The concrete iterator types.",N,N],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",N,N],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",N,N],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",N,N],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",N,N],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",N,N],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",N,N],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",N,N],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",N,N],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",N,N],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",N,N],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",N,N],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",N,N],[3,"Flatten","","An iterator adapter to simply flatten a structure.",N,N],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",N,N],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",N,N],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",N,N],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",N,N],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,N],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",N,N],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",N,N],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",N,N],[3,"RepeatN","","An iterator that produces n repetitions of an element.",N,N],[3,"RepeatCall","","See `repeat_call` for more information.",N,N],[3,"Unfold","","See `unfold` for more information.",N,N],[12,"state","","Internal state that will be passed to the closure on the next iteration",6,N],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",N,N],[3,"TupleBuffer","","An iterator over a incomplete tuple.",N,N],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",N,N],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",N,N],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",N,N],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",N,N],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",N,N],[3,"Zip","","See `multizip` for more information.",N,N],[11,"clone","","",7,[[["self"]],["interleave"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"clone","","",8,[[["self"]],["interleaveshortest"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"clone","","",9,[[["self"]],["putback"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"with_value","","put back value `value` (builder method)",9,N],[11,"into_parts","","Split the `PutBack` into its parts.",9,N],[11,"put_back","","Put back a single value to the front of the iterator.",9,N],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"all","","",9,[[["self"],["g"]],["bool"]]],[11,"fold","","",9,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["product"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"fold","","",10,[[["self"],["acc"],["g"]],["acc"]]],[11,"clone","","",11,[[["self"]],["batching"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"clone","","",12,[[["self"]],["step"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"clone","","",13,[[["self"]],["self"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"clone","","",16,[[["self"]],["self"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"fold","","",16,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"clone","","",18,[[["self"]],["whilesome"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"clone","","",20,[[["self"]],["flatten"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"fold","","",20,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"fold","","",21,[[["self"],["acc"],["fold"]],["acc"]]],[11,"collect","","",21,[[["self"]],["c"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,N],[11,"fold","","",23,[[["self"],["acc"],["g"]],["acc"]]],[11,"collect","","",23,[[["self"]],["c"]]],[11,"next_back","","",23,[[["self"]],["option"]]],[11,"clone","itertools","",4,[[["self"]],["eitherorboth"]]],[11,"eq","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"ne","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","itertools::structs","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["self"]]],[11,"clone","","",25,[[["self"]],["format"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["intersperse"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"clone","itertools","",2,[[["self"]],["minmaxresult"]]],[11,"eq","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,[[["self"]],["option"]]],[11,"clone","itertools::structs","",29,[[["self"]],["padusing"]]],[11,"next","","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,N],[11,"next_back","","",29,[[["self"]],["option"]]],[11,"peeking_next","","",9,[[["self"],["f"]],["option"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"size_hint","","",30,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"size_hint","","",31,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,N],[11,"next_back","","",32,[[["self"]],["option"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["unfold"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"clone","","",34,[[["self"]],["iterate"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"next","","",36,[[["self"]],["option"]]],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",36,[[["self"]],["tuplebuffer"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"clone","itertools","",3,[[["self"]],["position"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"into_inner","","Return the inner value.",3,[[["self"]],["t"]]],[11,"next","itertools::structs","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"clone","","",39,[[["self"]],["zipeq"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"clone","","",40,[[["self"]],["ziplongest"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"next_back","","",40,[[["self"]],["option"]]],[11,"clone","","",41,[[["self"]],["zip"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"from","","",41,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",N,N],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",42,[[["self"],["f"]],["option"]]],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",N,N],[11,"interleave","","Alternate elements from two iterators until both have run out.",43,[[["self"],["j"]],["interleave"]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",43,[[["self"],["j"]],["interleaveshortest"]]],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",43,N],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",43,[[["self"],["j"]],["ziplongest"]]],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",43,[[["self"],["j"]],["zipeq"]]],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",43,[[["self"],["f"]],["batching"]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",43,[[["self"]],["tuplewindows"]]],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",43,[[["self"]],["tuples"]]],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",43,[[["self"],["usize"]],["step"]]],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",43,[[["self"],["f"]],["mapresults"]]],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",43,[[["self"],["j"]],["merge"]]],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",43,[[["self"],["j"],["f"]],["mergeby"]]],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",43,[[["self"],["j"],["f"]],["mergejoinby"]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",43,[[["self"],["j"]],["product"]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",43,[[["self"],["f"]],["coalesce"]]],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",43,[[["self"]],["dedup"]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",43,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",43,[[["self"],["f"]],["takewhileref"]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",43,[[["self"]],["whilesome"]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",43,[[["self"]],["tuplecombinations"]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",43,[[["self"],["usize"],["f"]],["padusing"]]],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",43,[[["self"]],["flatten"]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",43,[[["self"]],["withposition"]]],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",43,[[["self"],["p"]],["positions"]]],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",43,[[["self"],["f"]],["update"]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",43,[[["self"]],["option"]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",43,[[["self"]],["option"]]],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",43,[[["self"],["p"]],["option"]]],[11,"all_equal","","Check whether all elements compare equal.",43,[[["self"]],["bool"]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",43,[[["self"],["usize"]],["self"]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",43,[[["self"],["usize"]],["self"]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",43,[[["self"],["f"]]]],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",43,N],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",43,[[["self"],["j"]],["usize"]]],[11,"format","","Format all iterator elements, separated by `sep`.",43,[[["self"],["str"]],["format"]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",43,[[["self"],["str"],["f"]],["formatwith"]]],[11,"fold_results","","Fold `Result` values from an iterator.",43,[[["self"],["b"],["f"]],["result"]]],[11,"fold_options","","Fold `Option` values from an iterator.",43,[[["self"],["b"],["f"]],["option"]]],[11,"fold1","","Accumulator of the elements in the iterator.",43,[[["self"],["f"]],["option"]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",43,[[["self"],["f"]],["option"]]],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",43,[[["self"],["b"],["f"]],["foldwhile"]]],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",43,N],[11,"minmax","","Return the minimum and maximum elements in the iterator.",43,[[["self"]],["minmaxresult"]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",43,[[["self"],["f"]],["minmaxresult"]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",43,[[["self"],["f"]],["minmaxresult"]]],[11,"clone","","",5,[[["self"]],["foldwhile"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Return the value in the continue or done.",5,[[["self"]],["t"]]],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",N,N],[14,"izip","","Create an iterator running multiple iterators in lockstep.",N,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["either"]]],[11,"extend","","",0,N],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"hash","","",0,N],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref_mut","","",0,N],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"into","","",0,[[["self"]],["result"]]]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"Unfold"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Intersperse"],[3,"MergeJoinBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["matrixmultiply"]={"doc":"General matrix multiplication for f32, f64 matrices.","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",N,N],[5,"dgemm","","General matrix multiplication (f64)",N,N]],"paths":[]};
searchIndex["ndarray"]={"doc":"The `ndarray` crate provides an n-dimensional container for general elements and for numerics.","items":[[3,"Axis","ndarray","An axis index.",N,N],[12,"0","","",0,N],[3,"AxisDescription","","Description of the axis, its length and its stride.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[12,"2","","",1,N],[3,"Dim","","Dimension description.",N,N],[3,"IxDynImpl","","Dynamic dimension or index type.",N,N],[3,"ShapeError","","An error related to array shape or layout.",N,N],[3,"Slice","","A slice (range with step size).",N,N],[12,"start","","",2,N],[12,"end","","",2,N],[12,"step","","",2,N],[3,"SliceInfo","","Represents all of the necessary information to perform a slice.",N,N],[3,"Zip","","Lock step function application across several arrays or other producers.",N,N],[3,"ArrayBase","","An n-dimensional array.",N,N],[3,"OwnedRepr","","Array's representation.",N,N],[3,"OwnedArcRepr","","ArcArray's representation.",N,N],[3,"ViewRepr","","Array view’s representation.",N,N],[3,"Shape","","A contiguous array shape of n dimensions.",N,N],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or custom strides.",N,N],[4,"ErrorKind","","Error code for an error related to array shape or layout.",N,N],[13,"IncompatibleShape","","incompatible shape",3,N],[13,"IncompatibleLayout","","incompatible memory layout",3,N],[13,"RangeLimited","","the shape does not fit inside type limits",3,N],[13,"OutOfBounds","","out of bounds indexing",3,N],[13,"Unsupported","","aliasing array elements",3,N],[4,"SliceOrIndex","","A slice (range with step) or an index.",N,N],[13,"Slice","","A range with step size. `end` is an exclusive index. Negative `begin` or `end` indexes are counted from the back of the axis. If `end` is `None`, the slice extends to the end of the axis.",4,N],[12,"start","ndarray::SliceOrIndex","",4,N],[12,"end","","",4,N],[12,"step","","",4,N],[13,"Index","ndarray","A single index.",4,N],[4,"FoldWhile","","Value controlling the execution of `.fold_while` on `Zip`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"Dim","","Create a new dimension value.",N,N],[5,"indices","","Create an iterable of the array shape `shape`.",N,[[["e"]],["indices"]]],[5,"indices_of","","Return an iterable of the indices of the passed-in array.",N,[[["arraybase"]],["indices"]]],[5,"stack","","Stack arrays along the given axis.",N,N],[5,"Ix0","","Create a zero-dimensional index",N,[[],["ix0"]]],[5,"Ix1","","Create a one-dimensional index",N,[[["ix"]],["ix1"]]],[5,"Ix2","","Create a two-dimensional index",N,[[["ix"],["ix"]],["ix2"]]],[5,"Ix3","","Create a three-dimensional index",N,[[["ix"],["ix"],["ix"]],["ix3"]]],[5,"Ix4","","Create a four-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"]],["ix4"]]],[5,"Ix5","","Create a five-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"],["ix"]],["ix5"]]],[5,"Ix6","","Create a six-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"],["ix"],["ix"]],["ix6"]]],[5,"IxDyn","","Create a dynamic-dimensional index",N,N],[5,"arr0","","Create a zero-dimensional array with the element `x`.",N,[[["a"]],["array0"]]],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",N,N],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",N,N],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",N,[[["a"]],["arrayview0"]]],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",N,N],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",N,N],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",N,N],[5,"aview_mut2","","Create a two-dimensional read-write array view with elements borrowing `xs`.",N,N],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",N,N],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",N,N],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",N,N],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",N,N],[11,"index","","",6,N],[11,"index_mut","","",6,N],[11,"eq","","",6,[[["self"],["arraybase"]],["bool"]]],[11,"from_iter","","",6,[[["i"]],["arraybase",["ix1"]]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"default","","",6,[[],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"_data_slice","","",7,N],[11,"ensure_unique","","",7,[[["arraybase"]]]],[11,"is_unique","","",7,[[["self"]],["bool"]]],[11,"clone_with_ptr","","",7,N],[11,"_data_slice","","",8,N],[11,"clone_with_ptr","","",8,N],[11,"clone_from_with_ptr","","",8,N],[11,"_data_slice","","",9,N],[11,"clone_with_ptr","","",9,N],[11,"_data_slice","","",9,N],[11,"new","","",8,[[["vec"]],["self"]]],[11,"into_shared","","",8,[[["self"]],["ownedrcrepr"]]],[11,"into_owned","","",8,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"new","","",7,[[["vec"]],["self"]]],[11,"into_shared","","",7,[[["self"]],["ownedrcrepr"]]],[11,"into_owned","","",7,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"cmp","","",0,[[["self"],["axis"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"index","","Return the index of the axis.",0,[[["self"]],["usize"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"into_dimension","","",10,N],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"zero","","",11,[[],["self"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["dim"]]],[11,"eq","","",11,[[["self"],["dim"]],["bool"]]],[11,"ne","","",11,[[["self"],["dim"]],["bool"]]],[11,"default","","",11,[[],["dim"]]],[11,"eq","","",11,[[["self"],["i"]],["bool"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"add","","",11,[[["self"],["self"]],["self"]]],[11,"add_assign","","",11,[[["self"],["self"]]]],[11,"add_assign","","",11,[[["self"],["self"]]]],[11,"add","","",11,[[["self"],["ix"]],["self"]]],[11,"add_assign","","",11,[[["self"],["ix"]]]],[11,"sub","","",11,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",11,[[["self"],["self"]]]],[11,"sub_assign","","",11,[[["self"],["self"]]]],[11,"sub","","",11,[[["self"],["ix"]],["self"]]],[11,"sub_assign","","",11,[[["self"],["ix"]]]],[11,"mul","","",11,[[["self"],["self"]],["self"]]],[11,"mul_assign","","",11,[[["self"],["self"]]]],[11,"mul_assign","","",11,[[["self"],["self"]]]],[11,"mul","","",11,[[["self"],["ix"]],["self"]]],[11,"mul_assign","","",11,[[["self"],["ix"]]]],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"_fastest_varying_stride_order","","",11,[[["self"]],["self"]]],[11,"into_pattern","","",11,N],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"next_for","","",11,[[["self"],["self"]],["option"]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"into_pattern","","",11,N],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"next_for","","",11,[[["self"],["self"]],["option"]]],[11,"equal","","",11,[[["self"],["self"]],["bool"]]],[11,"size","","",11,[[["self"]],["usize"]]],[11,"size_checked","","",11,[[["self"]],["option",["usize"]]]],[11,"default_strides","","",11,[[["self"]],["self"]]],[11,"_fastest_varying_stride_order","","",11,[[["self"]],["self"]]],[11,"min_stride_axis","","",11,[[["self"],["self"]],["axis"]]],[11,"max_stride_axis","","",11,[[["self"],["self"]],["axis"]]],[11,"first_index","","",11,[[["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",11,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"into_pattern","","",11,N],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"next_for","","",11,[[["self"],["self"]],["option"]]],[11,"equal","","",11,[[["self"],["self"]],["bool"]]],[11,"size","","",11,[[["self"]],["usize"]]],[11,"size_checked","","",11,[[["self"]],["option",["usize"]]]],[11,"last_elem","","",11,[[["self"]],["usize"]]],[11,"set_last_elem","","",11,[[["self"],["usize"]]]],[11,"default_strides","","",11,[[["self"]],["self"]]],[11,"fortran_strides","","",11,[[["self"]],["self"]]],[11,"_fastest_varying_stride_order","","",11,[[["self"]],["self"]]],[11,"min_stride_axis","","",11,[[["self"],["self"]],["axis"]]],[11,"first_index","","",11,[[["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",11,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"into_pattern","","",11,N],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"size","","",11,[[["self"]],["usize"]]],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"next_for","","",11,[[["self"],["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",11,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"_fastest_varying_stride_order","","",11,[[["self"]],["self"]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"into_pattern","","",11,N],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"into_pattern","","",11,N],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"ndim","","",11,[[["self"]],["usize"]]],[11,"into_pattern","","",11,N],[11,"slice","","",11,N],[11,"slice_mut","","",11,N],[11,"zero_index_with_ndim","","",11,[[["usize"]],["self"]]],[11,"insert_axis","","",11,N],[11,"try_remove_axis","","",11,N],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["ixdynimpl"]]],[11,"eq","","",10,[[["self"],["ixdynimpl"]],["bool"]]],[11,"ne","","",10,[[["self"],["ixdynimpl"]],["bool"]]],[11,"default","","",10,[[],["ixdynimpl"]]],[11,"from","","",10,N],[11,"from","","",10,[[["vec",["ix"]]],["self"]]],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"deref","","",10,N],[11,"deref_mut","","",10,N],[11,"remove_axis","","",11,[[["self"],["axis"]],["self"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",11,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",11,[[["self"],["ixdyn"]],["isize"]]],[11,"remove_axis","","",11,[[["self"],["axis"]],["ix0"]]],[11,"remove_axis","","",11,[[["self"],["axis"]],["ix1"]]],[11,"remove_axis","","",11,N],[11,"remove_axis","","",11,N],[11,"remove_axis","","",11,N],[11,"remove_axis","","",11,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"axis","","Return axis",1,[[["self"]],["axis"]]],[11,"len","","Return length",1,[[["self"]],["ix"]]],[11,"stride","","Return stride",1,[[["self"]],["ixs"]]],[0,"iter","","Producers, iterables and iterators.",N,N],[3,"Axes","ndarray::iter","An iterator over the length and stride of each axis of an array.",N,N],[3,"Indices","","Indices producer and iterable.",N,N],[3,"IndicesIter","","An iterator over the indexes of an array shape.",N,N],[3,"Iter","","An iterator over the elements of an array.",N,N],[3,"IterMut","","An iterator over the elements of an array (mutable).",N,N],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",N,N],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array (mutable).",N,N],[3,"Lanes","","See `.lanes()` for more information.",N,N],[3,"LanesMut","","See `.lanes_mut()` for more information.",N,N],[3,"LanesIter","","An iterator that traverses over all dimensions but the innermost, and yields each inner row.",N,N],[3,"LanesIterMut","","An iterator that traverses over all dimensions but the innermost, and yields each inner row (mutable).",N,N],[3,"AxisIter","","An iterator that traverses over an axis and and yields each subview.",N,N],[3,"AxisIterMut","","An iterator that traverses over an axis and and yields each subview (mutable)",N,N],[3,"AxisChunksIter","","An iterator that traverses over the specified axis and yields views of the specified size on this axis.",N,N],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis and yields mutable views of the specified size on this axis.",N,N],[3,"ExactChunks","","Exact chunks producer and iterable.",N,N],[3,"ExactChunksIter","","Exact chunks iterator.",N,N],[3,"ExactChunksMut","","Exact chunks producer and iterable.",N,N],[3,"ExactChunksIterMut","","Exact chunks iterator.",N,N],[3,"Windows","","Window producer and iterable",N,N],[11,"clone","ndarray","",2,[[["self"]],["slice"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["slice"]],["bool"]]],[11,"ne","","",2,[[["self"],["slice"]],["bool"]]],[11,"hash","","",2,N],[11,"new","","Create a new `Slice` with the given extents.",2,[[["isize"],["option",["isize"]],["isize"]],["slice"]]],[11,"step_by","","Create a new `Slice` with the given step size (multiplied with the previous step size).",2,[[["self"],["isize"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["sliceorindex"]],["bool"]]],[11,"ne","","",4,[[["self"],["sliceorindex"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["self"]]],[11,"is_slice","","Returns `true` if `self` is a `Slice` value.",4,[[["self"]],["bool"]]],[11,"is_index","","Returns `true` if `self` is an `Index` value.",4,[[["self"]],["bool"]]],[11,"step_by","","Returns a new `SliceOrIndex` with the given step size (multiplied with the previous step size).",4,[[["self"],["isize"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["range",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["isize"]]],["slice"]]],[11,"from","","",2,[[["range",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["usize"]]],["slice"]]],[11,"from","","",2,[[["range",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["i32"]]],["slice"]]],[11,"from","","",4,[[["range",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["range",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["range",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["i32"]]],["sliceorindex"]]],[11,"from","","",2,[[["rangefull"]],["slice"]]],[11,"from","","",4,[[["rangefull"]],["sliceorindex"]]],[11,"from","","",4,[[["slice"]],["sliceorindex"]]],[11,"from","","",4,[[["isize"]],["sliceorindex"]]],[11,"from","","",4,[[["usize"]],["sliceorindex"]]],[11,"from","","",4,[[["i32"]],["sliceorindex"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"deref","","",12,N],[11,"new","","Returns a new `SliceInfo` instance.",12,[[["t"]],["result",["sliceinfo","shapeerror"]]]],[11,"out_ndim","","Returns the number of dimensions after calling `.slice()` (including taking subviews).",12,[[["self"]],["usize"]]],[11,"as_ref","","",12,N],[11,"as_ref","","",12,[[["self"]],["sliceinfo"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"clone","ndarray::iter","",13,[[["self"]],["indicesiter"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"into_iter","","",14,N],[11,"clone","","",14,[[["self"]],["indices"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"contiguous_stride","","",14,N],[11,"clone","","",15,[[["self"]],["self"]]],[11,"into_iter","","",15,N],[11,"into_iter","","",16,N],[11,"clone","","",17,[[["self"]],["self"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"clone","","",19,[[["self"]],["self"]]],[11,"into_iter","","",19,N],[11,"clone","","",20,[[["self"]],["self"]]],[11,"into_iter","","",20,N],[11,"into_iter","","",21,N],[11,"clone","","",22,[[["self"]],["self"]]],[11,"clone","","",23,[[["self"]],["indexediter"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"fold","","",22,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"len","","",22,[[["self"]],["usize"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,N],[11,"len","","",23,[[["self"]],["usize"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"fold","","",24,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"len","","",24,[[["self"]],["usize"]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"len","","",25,[[["self"]],["usize"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"len","","",26,[[["self"]],["usize"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"len","","",27,[[["self"]],["usize"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["self"]]],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",28,N],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"len","","",28,[[["self"]],["usize"]]],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",29,N],[11,"next","","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,N],[11,"next_back","","",29,[[["self"]],["option"]]],[11,"len","","",29,[[["self"]],["usize"]]],[11,"contiguous_stride","","",28,[[["self"]],["isize"]]],[11,"contiguous_stride","","",29,[[["self"]],["isize"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"size_hint","","",30,N],[11,"next_back","","",30,[[["self"]],["option"]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"size_hint","","",31,N],[11,"next_back","","",31,[[["self"]],["option"]]],[11,"clone","ndarray","",32,[[["self"]],["shapeerror"]]],[11,"kind","","Return the `ErrorKind` of this error.",32,[[["self"]],["errorkind"]]],[11,"from_kind","","Create a new `ShapeError`",32,[[["errorkind"]],["self"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"description","","",32,[[["self"]],["str"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"from","","Create a `Shape` from `dimension`, using the default memory layout.",33,[[["d"]],["shape"]]],[11,"from","","",34,[[["t"]],["self"]]],[11,"into_shape","","",33,[[["self"]],["shape"]]],[11,"f","","",33,[[["self"]],["self"]]],[11,"set_f","","",33,[[["self"],["bool"]],["self"]]],[11,"strides","","",33,[[["self"],["d"]],["strideshape"]]],[11,"size","","Return the size of the shape in number of elements",33,[[["self"]],["usize"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["zip"]]],[11,"from","","Create a new `Zip` from the input array or other producer `p`.",35,[[["ip"]],["self"]]],[11,"indexed","","Create a new `Zip` with an index producer and the producer `p`.",35,[[["ip"]],["self"]]],[11,"size","","Return a the number of element tuples in the Zip",35,[[["self"]],["usize"]]],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",35,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",35,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",35,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",35,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",35,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",35,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",35,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",35,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",35,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",35,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"split","","Split the `Zip` evenly in two.",35,N],[11,"into_inner","","Return the inner value",5,[[["self"]],["t"]]],[11,"is_done","","Return true if it is `Done`, false if `Continue`",5,[[["self"]],["bool"]]],[0,"prelude","","ndarray prelude.",N,N],[11,"clone","","",6,[[["self"]],["arraybase"]]],[11,"clone_from","","`Array` implements `.clone_from()` to reuse an array's existing allocation. Semantically equivalent to `*self = other.clone()`, but potentially more efficient.",6,[[["self"],["self"]]]],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",6,[[["vec"]],["self"]]],[11,"from_iter","","Create a one-dimensional array from an iterable.",6,[[["i"]],["self"]]],[11,"linspace","","Create a one-dimensional array from the inclusive interval `[start, end]` with `n` elements. `A` must be a floating point type.",6,[[["a"],["a"],["usize"]],["self"]]],[11,"range","","Create a one-dimensional array from the half-open interval `[start, end)` with elements spaced by `step`. `A` must be a floating point type.",6,[[["a"],["a"],["a"]],["self"]]],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",6,[[["ix"]],["self"]]],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",6,[[["sh"],["a"]],["self"]]],[11,"zeros","","Create an array with zeros, shape `shape`.",6,[[["sh"]],["self"]]],[11,"ones","","Create an array with ones, shape `shape`.",6,[[["sh"]],["self"]]],[11,"default","","Create an array with default values, shape `shape`",6,[[["sh"]],["self"]]],[11,"from_shape_fn","","Create an array with values created by the function `f`.",6,[[["sh"],["f"]],["self"]]],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of elements needed.)",6,[[["sh"],["vec"]],["result",["shapeerror"]]]],[11,"from_shape_vec_unchecked","","Create an array from a vector and interpret it according to the provided dimensions and strides. (No cloning of elements needed.)",6,[[["sh"],["vec"]],["self"]]],[11,"uninitialized","","Create an array with uninitalized elements, shape `shape`.",6,[[["sh"]],["self"]]],[11,"len","","Return the total number of elements in the array.",6,[[["self"]],["usize"]]],[11,"len_of","","Return the length of `axis`.",6,[[["self"],["axis"]],["usize"]]],[11,"is_empty","","Return whether the array has any elements",6,[[["self"]],["bool"]]],[11,"ndim","","Return the number of dimensions (axes) in the array",6,[[["self"]],["usize"]]],[11,"dim","","Return the shape of the array in its “pattern” form, an integer in the one-dimensional case, tuple in the n-dimensional cases and so on.",6,N],[11,"raw_dim","","Return the shape of the array as it stored in the array.",6,[[["self"]],["d"]]],[11,"shape","","Return the shape of the array as a slice.",6,N],[11,"strides","","Return the strides of the array as a slice",6,N],[11,"view","","Return a read-only view of the array",6,[[["self"]],["arrayview"]]],[11,"view_mut","","Return a read-write view of the array",6,[[["self"]],["arrayviewmut"]]],[11,"to_owned","","Return an uniquely owned copy of the array.",6,[[["self"]],["array"]]],[11,"to_shared","","Return a shared ownership (copy on write) array.",6,[[["self"]],["rcarray"]]],[11,"into_owned","","Turn the array into a uniquely owned array, cloning the array elements to unshare them if necessary.",6,[[["self"]],["array"]]],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array, without any copying.",6,[[["self"]],["rcarray"]]],[11,"iter","","Return an iterator of references to the elements of the array.",6,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",6,[[["self"]],["itermut"]]],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",6,[[["self"]],["indexediter"]]],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",6,[[["self"]],["indexeditermut"]]],[11,"slice","","Return a sliced view of the array.",6,[[["self"],["sliceinfo"]],["arrayview"]]],[11,"slice_mut","","Return a sliced read-write view of the array.",6,[[["self"],["sliceinfo"]],["arrayviewmut"]]],[11,"slice_move","","Slice the array, possibly changing the number of dimensions.",6,[[["self"],["sliceinfo"]],["arraybase"]]],[11,"slice_inplace","","Slice the array in place without changing the number of dimensions.",6,N],[11,"slice_axis","","Return a view of the array, sliced along the specified axis.",6,[[["self"],["axis"],["slice"]],["arrayview"]]],[11,"slice_axis_mut","","Return a mutable view of the array, sliced along the specified axis.",6,[[["self"],["axis"],["slice"]],["arrayviewmut"]]],[11,"slice_axis_inplace","","Slice the array in place along the specified axis.",6,[[["self"],["axis"],["slice"]]]],[11,"get","","Return a reference to the element at `index`, or return `None` if the index is out of bounds.",6,[[["self"],["i"]],["option"]]],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None` if the index is out of bounds.",6,[[["self"],["i"]],["option"]]],[11,"uget","","Perform unchecked array indexing.",6,[[["self"],["i"]],["a"]]],[11,"uget_mut","","Perform unchecked array indexing.",6,[[["self"],["i"]],["a"]]],[11,"swap","","Swap elements at indices `index1` and `index2`.",6,[[["self"],["i"],["i"]]]],[11,"uswap","","Swap elements unchecked at indices `index1` and `index2`.",6,[[["self"],["i"],["i"]]]],[11,"subview","","Along `axis`, select the subview `index` and return a view with that axis removed.",6,[[["self"],["axis"],["ix"]],["arrayview"]]],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view with the axis removed.",6,[[["self"],["axis"],["ix"]],["arrayviewmut"]]],[11,"subview_inplace","","Collapse dimension `axis` into length one, and select the subview of `index` along that axis.",6,[[["self"],["axis"],["ix"]]]],[11,"into_subview","","Along `axis`, select the subview `index` and return `self` with that axis removed.",6,[[["self"],["axis"],["ix"]],["arraybase"]]],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`  and and copy them into a new array.",6,N],[11,"genrows","","Return a producer and iterable that traverses over the generalized rows of the array. For a 2D array these are the regular rows.",6,[[["self"]],["lanes"]]],[11,"genrows_mut","","Return a producer and iterable that traverses over the generalized rows of the array and yields mutable array views.",6,[[["self"]],["lanesmut"]]],[11,"gencolumns","","Return a producer and iterable that traverses over the generalized columns of the array. For a 2D array these are the regular columns.",6,[[["self"]],["lanes"]]],[11,"gencolumns_mut","","Return a producer and iterable that traverses over the generalized columns of the array and yields mutable array views.",6,[[["self"]],["lanesmut"]]],[11,"lanes","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",6,[[["self"],["axis"]],["lanes"]]],[11,"lanes_mut","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",6,[[["self"],["axis"]],["lanesmut"]]],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension and yields each subview.",6,[[["self"]],["axisiter"]]],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension and yields each subview.",6,[[["self"]],["axisitermut"]]],[11,"axis_iter","","Return an iterator that traverses over `axis` and yields each subview along it.",6,[[["self"],["axis"]],["axisiter"]]],[11,"axis_iter_mut","","Return an iterator that traverses over `axis` and yields each mutable subview along it.",6,[[["self"],["axis"]],["axisitermut"]]],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping views along that axis.",6,[[["self"],["axis"],["usize"]],["axischunksiter"]]],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping read-write views along that axis.",6,[[["self"],["axis"],["usize"]],["axischunksitermut"]]],[11,"exact_chunks","","Return an exact chunks producer (and iterable).",6,[[["self"],["e"]],["exactchunks"]]],[11,"exact_chunks_mut","","Return an exact chunks producer (and iterable).",6,[[["self"],["e"]],["exactchunksmut"]]],[11,"windows","","Return a window producer and iterable.",6,[[["self"],["e"]],["windows"]]],[11,"diag","","Return an view of the diagonal elements of the array.",6,[[["self"]],["arrayview1"]]],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",6,[[["self"]],["arrayviewmut1"]]],[11,"into_diag","","Return the diagonal as a one-dimensional array.",6,[[["self"]],["arraybase",["ix1"]]]],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in memory (where the last index is the most rapidly varying).",6,[[["self"]],["bool"]]],[11,"as_ptr","","Return a pointer to the first element in the array.",6,N],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",6,N],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",6,[[["self"]],["option"]]],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",6,[[["self"]],["option"]]],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",6,[[["self"]],["option"]]],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",6,[[["self"]],["option"]]],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of elements is accepted, but the source array or view must be contiguous, otherwise we cannot rearrange the dimension.",6,[[["self"],["e"]],["result",["arraybase","shapeerror"]]]],[11,"reshape","","Note: Reshape is for `RcArray` only. Use `.into_shape()` for other arrays and array views.",6,[[["self"],["e"]],["arraybase"]]],[11,"into_dyn","","Convert any array or array view to a dynamic dimensional array or array view (respectively).",6,[[["self"]],["arraybase",["ixdyn"]]]],[11,"into_dimensionality","","Convert an array or array view to another with the same type, but different dimensionality type. Errors if the dimensions don't agree.",6,[[["self"]],["result",["arraybase","shapeerror"]]]],[11,"broadcast","","Act like a larger size and/or shape array by broadcasting into a larger shape, if possible.",6,[[["self"],["e"]],["option",["arrayview"]]]],[11,"swap_axes","","Swap axes `ax` and `bx`.",6,[[["self"],["usize"],["usize"]]]],[11,"permuted_axes","","Permute the axes.",6,[[["self"],["t"]],["arraybase"]]],[11,"reversed_axes","","Transpose the array by reversing axes.",6,[[["self"]],["arraybase"]]],[11,"t","","Return a transposed view of the array.",6,[[["self"]],["arrayview"]]],[11,"axes","","Return an iterator over the length and stride of each axis.",6,[[["self"]],["axes"]]],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute value), preferring axes with len > 1.",6,[[["self"]],["axis"]]],[11,"invert_axis","","Reverse the stride of `axis`.",6,[[["self"],["axis"]]]],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",6,[[["self"],["axis"],["axis"]],["bool"]]],[11,"insert_axis","","Insert new array axis at `axis` and return the result.",6,[[["self"],["axis"]],["arraybase"]]],[11,"remove_axis","","Remove array axis `axis` and return the result.",6,[[["self"],["axis"]],["arraybase"]]],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",6,[[["self"],["arraybase"]]]],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",6,[[["self"],["a"]]]],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step, calling the closure `f` on each element pair.",6,[[["self"],["arraybase"],["f"]]]],[11,"fold","","Traverse the array elements and apply a fold, returning the resulting value.",6,[[["self"],["b"],["f"]],["b"]]],[11,"map","","Call `f` by reference on each element and create a new array with the new values.",6,[[["self"],["f"]],["array"]]],[11,"map_mut","","Call `f` on a mutable reference of each element and create a new array with the new values.",6,[[["self"],["f"]],["array"]]],[11,"mapv","","Call `f` by value on each element and create a new array with the new values.",6,[[["self"],["f"]],["array"]]],[11,"mapv_into","","Call `f` by value on each element, update the array with the new values and return it.",6,[[["self"],["f"]],["self"]]],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",6,[[["self"],["f"]]]],[11,"mapv_inplace","","Modify the array in place by calling `f` by value on each element. The array is updated with the new values.",6,[[["self"],["f"]]]],[11,"visit","","Visit each element in the array by calling `f` by reference on each element.",6,[[["self"],["f"]]]],[11,"fold_axis","","Fold along an axis.",6,[[["self"],["axis"],["b"],["f"]],["array"]]],[11,"map_axis","","Reduce the values along an axis into just one value, producing a new array with one less dimension.",6,[[["self"],["axis"],["f"]],["array"]]],[11,"map_axis_mut","","Reduce the values along an axis into just one value, producing a new array with one less dimension. 1-dimensional lanes are passed as mutable references to the reducer, allowing for side-effects.",6,[[["self"],["axis"],["f"]],["array"]]],[11,"to_vec","","Return an vector with the elements of the one-dimensional array.",6,[[["self"]],["vec"]]],[11,"row","","Return an array view of row `index`.",6,[[["self"],["ix"]],["arrayview1"]]],[11,"row_mut","","Return a mutable array view of row `index`.",6,[[["self"],["ix"]],["arrayviewmut1"]]],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",6,[[["self"]],["usize"]]],[11,"column","","Return an array view of column `index`.",6,[[["self"],["ix"]],["arrayview1"]]],[11,"column_mut","","Return a mutable array view of column `index`.",6,[[["self"],["ix"]],["arrayviewmut1"]]],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",6,[[["self"]],["usize"]]],[11,"is_square","","Return true if the array is square, false otherwise.",6,[[["self"]],["bool"]]],[11,"scalar_sum","","Return the sum of all elements in the array.",6,[[["self"]],["a"]]],[11,"sum_axis","","Return sum along `axis`.",6,[[["self"],["axis"]],["array"]]],[11,"mean_axis","","Return mean along `axis`.",6,[[["self"],["axis"]],["array"]]],[11,"var_axis","","Return variance along `axis`.",6,[[["self"],["axis"],["a"]],["array"]]],[11,"all_close","","Return `true` if the arrays' elementwise differences are all within the given absolute tolerance, `false` otherwise.",6,[[["self"],["arraybase"],["a"]],["bool"]]],[0,"linalg","","Linear algebra.",N,N],[5,"general_mat_mul","ndarray::linalg","General matrix-matrix multiplication.",N,[[["a"],["arraybase"],["arraybase"],["a"],["arraybase"]]]],[5,"general_mat_vec_mul","","General matrix-vector multiplication.",N,[[["a"],["arraybase"],["arraybase"],["a"],["arraybase"]]]],[11,"dot","ndarray","Perform dot product or matrix multiplication of arrays `self` and `rhs`.",6,N],[11,"dot","","Compute the dot product of one-dimensional arrays.",6,[[["self"],["arraybase"]],["a"]]],[11,"dot","","Perform the matrix multiplication of the row vector `self` and rectangular matrix `rhs`.",6,[[["self"],["arraybase"]],["array",["ix1"]]]],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",6,N],[11,"dot","","",6,[[["self"],["arraybase"]],["array2"]]],[11,"dot","","",6,[[["self"],["arraybase"]],["array",["ix1"]]]],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where `alpha` is a scalar and `rhs` is another array. This operation is also known as `axpy` in BLAS.",6,[[["self"],["a"],["arraybase"]]]],[8,"Dot","ndarray::linalg","Matrix Multiplication",N,N],[16,"Output","","The result of the operation.",36,N],[10,"dot","","",36,N],[11,"add","ndarray","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"add","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"add","","",6,[[["self"],["b"]],["arraybase"]]],[11,"sub","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"sub","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"sub","","",6,[[["self"],["b"]],["arraybase"]]],[11,"mul","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"mul","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"mul","","",6,[[["self"],["b"]],["arraybase"]]],[11,"div","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"div","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"div","","",6,[[["self"],["b"]],["arraybase"]]],[11,"rem","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"rem","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"rem","","",6,[[["self"],["b"]],["arraybase"]]],[11,"bitand","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitand","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitand","","",6,[[["self"],["b"]],["arraybase"]]],[11,"bitor","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitor","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitor","","",6,[[["self"],["b"]],["arraybase"]]],[11,"bitxor","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitxor","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitxor","","",6,[[["self"],["b"]],["arraybase"]]],[11,"shl","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"shl","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"shl","","",6,[[["self"],["b"]],["arraybase"]]],[11,"shr","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"shr","","",6,[[["self"],["arraybase"]],["arraybase"]]],[11,"shr","","",6,[[["self"],["b"]],["arraybase"]]],[11,"neg","","Perform an elementwise negation of `self` and return the result.",6,[[["self"]],["self"]]],[11,"not","","Perform an elementwise unary not of `self` and return the result.",6,[[["self"]],["self"]]],[11,"add_assign","","",6,[[["self"],["arraybase"]]]],[11,"add_assign","","",6,[[["self"],["a"]]]],[11,"sub_assign","","",6,[[["self"],["arraybase"]]]],[11,"sub_assign","","",6,[[["self"],["a"]]]],[11,"mul_assign","","",6,[[["self"],["arraybase"]]]],[11,"mul_assign","","",6,[[["self"],["a"]]]],[11,"div_assign","","",6,[[["self"],["arraybase"]]]],[11,"div_assign","","",6,[[["self"],["a"]]]],[11,"rem_assign","","",6,[[["self"],["arraybase"]]]],[11,"rem_assign","","",6,[[["self"],["a"]]]],[11,"bitand_assign","","",6,[[["self"],["arraybase"]]]],[11,"bitand_assign","","",6,[[["self"],["a"]]]],[11,"bitor_assign","","",6,[[["self"],["arraybase"]]]],[11,"bitor_assign","","",6,[[["self"],["a"]]]],[11,"bitxor_assign","","",6,[[["self"],["arraybase"]]]],[11,"bitxor_assign","","",6,[[["self"],["a"]]]],[11,"shl_assign","","",6,[[["self"],["arraybase"]]]],[11,"shl_assign","","",6,[[["self"],["a"]]]],[11,"shr_assign","","",6,[[["self"],["arraybase"]]]],[11,"shr_assign","","",6,[[["self"],["a"]]]],[6,"Ix0","","zero-dimensionial",N,N],[6,"Ix1","","one-dimensional",N,N],[6,"Ix2","","two-dimensional",N,N],[6,"Ix3","","three-dimensional",N,N],[6,"Ix4","","four-dimensional",N,N],[6,"Ix5","","five-dimensional",N,N],[6,"Ix6","","six-dimensional",N,N],[6,"IxDyn","","dynamic-dimensional",N,N],[6,"Array0","","zero-dimensional array",N,N],[6,"Array1","","one-dimensional array",N,N],[6,"Array2","","two-dimensional array",N,N],[6,"Array3","","three-dimensional array",N,N],[6,"Array4","","four-dimensional array",N,N],[6,"Array5","","five-dimensional array",N,N],[6,"Array6","","six-dimensional array",N,N],[6,"ArrayD","","dynamic-dimensional array",N,N],[6,"ArrayView0","","zero-dimensional array view",N,N],[6,"ArrayView1","","one-dimensional array view",N,N],[6,"ArrayView2","","two-dimensional array view",N,N],[6,"ArrayView3","","three-dimensional array view",N,N],[6,"ArrayView4","","four-dimensional array view",N,N],[6,"ArrayView5","","five-dimensional array view",N,N],[6,"ArrayView6","","six-dimensional array view",N,N],[6,"ArrayViewD","","dynamic-dimensional array view",N,N],[6,"ArrayViewMut0","","zero-dimensional read-write array view",N,N],[6,"ArrayViewMut1","","one-dimensional read-write array view",N,N],[6,"ArrayViewMut2","","two-dimensional read-write array view",N,N],[6,"ArrayViewMut3","","three-dimensional read-write array view",N,N],[6,"ArrayViewMut4","","four-dimensional read-write array view",N,N],[6,"ArrayViewMut5","","five-dimensional read-write array view",N,N],[6,"ArrayViewMut6","","six-dimensional read-write array view",N,N],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",N,N],[6,"RcArray1","","one-dimensional shared ownership array",N,N],[6,"RcArray2","","two-dimensional shared ownership array",N,N],[6,"Ix","","Array index type",N,N],[6,"Ixs","","Array index type (signed)",N,N],[6,"RcArray","","An array where the data has shared ownership and is copy on write.",N,N],[6,"ArcArray","","An array where the data has shared ownership and is copy on write.",N,N],[6,"Array","","An array that owns its data uniquely.",N,N],[6,"ArrayView","","A read-only array view.",N,N],[6,"ArrayViewMut","","A read-write array view.",N,N],[8,"Dimension","","Array shape and index trait.",N,N],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",37,N],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this dimension.",37,N],[16,"Pattern","","Pattern matching friendly form of the dimension value.",37,N],[16,"Smaller","","Next smaller dimension (if applicable)",37,N],[16,"Larger","","Next larger dimension",37,N],[10,"into_pattern","","Convert the dimension into a pattern matching friendly value.",37,N],[11,"size","","Compute the size of the dimension (number of elements)",37,[[["self"]],["usize"]]],[11,"size_checked","","Compute the size while checking for overflow.",37,[[["self"]],["option",["usize"]]]],[11,"as_array_view","","Borrow as a read-only array view.",37,[[["self"]],["arrayview1",["ix"]]]],[11,"as_array_view_mut","","Borrow as a read-write array view.",37,[[["self"]],["arrayviewmut1",["ix"]]]],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",37,[[["self"]],["ixdyn"]]],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",37,[[["self"]],["privatemarker"]]],[8,"IntoDimension","","Argument conversion a dimension.",N,N],[16,"Dim","","",38,N],[10,"into_dimension","","",38,N],[8,"RemoveAxis","","Array shape with a next smaller dimension.",N,N],[10,"remove_axis","","",39,N],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",N,N],[8,"AsArray","","Argument conversion into an array view",N,N],[8,"LinalgScalar","","Elements that support linear algebra operations.",N,N],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",N,N],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows customizing the memory layout (strides) of an array shape.",N,N],[16,"Dim","","",40,N],[16,"Strides","","",40,N],[10,"into_shape","","",40,[[["self"]],["shape"]]],[10,"f","","",40,[[["self"]],["shape"]]],[10,"set_f","","",40,[[["self"],["bool"]],["shape"]]],[10,"strides","","",40,N],[8,"IndexLonger","","Extra indexing methods for array views",N,N],[16,"Output","","The type of the reference to the element that is produced, including its lifetime.",41,N],[10,"index","","Get a reference of a element through the view.",41,N],[10,"get","","Get a reference of a element through the view.",41,[[["self"],["i"]],["option"]]],[10,"uget","","Get a reference of a element through the view without boundary check",41,N],[8,"Data","","Array representation trait.",N,N],[16,"Elem","","The array element type.",42,N],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",42,[[["self"]],["privatemarker"]]],[8,"DataMut","","Array representation trait.",N,N],[8,"DataOwned","","Array representation trait.",N,N],[8,"DataShared","","Array representation trait.",N,N],[8,"DataClone","","Array representation trait.",N,N],[8,"FixedInitializer","","Fixed-size array used for array initialization",N,N],[16,"Elem","","",43,N],[10,"as_init_slice","","",43,N],[10,"len","","",43,[[],["usize"]]],[8,"NdProducer","","A producer of an n-dimensional set of elements; for example an array view, mutable array view or an iterator that yields chunks.",N,N],[16,"Item","","The element produced per iteration.",44,N],[16,"Dim","","Dimension type",44,N],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",44,[[["self"]],["privatemarker"]]],[8,"IntoNdProducer","","Argument conversion into a producer.",N,N],[16,"Item","","The element produced per iteration.",45,N],[16,"Dim","","Dimension type of the producer",45,N],[16,"Output","","",45,N],[10,"into_producer","","Convert the value into an `NdProducer`.",45,N],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",N,N],[11,"clone","","",8,[[["self"]],["ownedrepr"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"clone","","",9,[[["self"]],["viewrepr"]]],[11,"clone","","",33,[[["self"]],["shape"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["strideshape"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[14,"array","","Create an `Array` with one, two or three dimensions.",N,N],[14,"s","","Slice argument constructor.",N,N],[14,"stack","","Stack arrays along the given axis.",N,N],[14,"azip","","Array zip macro: lock step function application across several arrays and producers.",N,N],[11,"into_iter","","",46,N],[11,"into_iter","","",47,N],[11,"from","","",46,[[["slice"]],["self"]]],[11,"from","","",46,[[["arraybase"]],["self"]]],[11,"from","","",47,[[["slice"]],["self"]]],[11,"from","","",47,[[["arraybase"]],["self"]]],[11,"into_dimension","","",48,[[["self"]],["ix1"]]],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",37,N],[11,"size","","Compute the size of the dimension (number of elements)",37,[[["self"]],["usize"]]],[11,"size_checked","","Compute the size while checking for overflow.",37,[[["self"]],["option",["usize"]]]],[11,"as_array_view","","Borrow as a read-only array view.",37,[[["self"]],["arrayview1",["ix"]]]],[11,"as_array_view_mut","","Borrow as a read-write array view.",37,[[["self"]],["arrayviewmut1",["ix"]]]],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",37,[[["self"]],["ixdyn"]]],[11,"ndim","","",49,[[["self"]],["usize"]]],[11,"slice","","",49,N],[11,"slice_mut","","",49,N],[11,"into_pattern","","",49,N],[11,"zero_index","","",49,[[["self"]],["self"]]],[11,"zero_index_with_ndim","","",49,[[["usize"]],["self"]]],[11,"insert_axis","","",49,N],[11,"try_remove_axis","","",49,N],[11,"from_dimension","","",49,[[["d2"]],["option"]]],[11,"zeros","","Create a new dimension value with `n` axes, all zeros",49,[[["usize"]],["ixdyn"]]],[11,"index_checked","","",48,[[["self"],["ix1"],["ix1"]],["option",["isize"]]]],[11,"index_unchecked","","",48,[[["self"],["ix1"]],["isize"]]],[11,"index_checked","","",48,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",48,[[["self"],["ixdyn"]],["isize"]]],[11,"fmt","ndarray::iter","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["self"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"next_back","","",50,[[["self"]],["option"]]],[11,"from","ndarray","",51,[[["vec"]],["self"]]],[11,"from","","",52,[[["vec"]],["self"]]],[11,"from","","",53,[[["vec"]],["self"]]],[11,"contiguous_stride","","",46,N],[11,"contiguous_stride","","",47,N],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way they are stored internally.",54,[[["self"]],["vec"]]],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",46,N],[11,"from_shape_ptr","","Create an `ArrayView<A, D>` from shape information and a raw pointer to the elements.",46,N],[11,"reborrow","","Convert the view into an `ArrayView<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",46,[[["self"]],["arrayview"]]],[11,"split_at","","Split the array view along `axis` and return one view strictly before the split and one view after the split.",46,N],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",46,[[["self"]],["option"]]],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",47,N],[11,"from_shape_ptr","","Create an `ArrayViewMut<A, D>` from shape information and a raw pointer to the elements.",47,N],[11,"reborrow","","Convert the view into an `ArrayViewMut<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",47,[[["self"]],["arrayviewmut"]]],[11,"split_at","","Split the array view along `axis` and return one mutable view strictly before the split and one mutable view after the split.",47,N],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",47,[[["self"]],["option"]]],[11,"index","","Convert a mutable array view to a mutable reference of a element.",47,[[["self"],["i"]],["a"]]],[11,"get","","Convert a mutable array view to a mutable reference of a element, with checked access.",47,[[["self"],["i"]],["option"]]],[11,"uget","","Convert a mutable array view to a mutable reference of a element without boundary check.",47,[[["self"],["i"]],["a"]]]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Slice"],[4,"ErrorKind"],[4,"SliceOrIndex"],[4,"FoldWhile"],[3,"ArrayBase"],[3,"OwnedArcRepr"],[3,"OwnedRepr"],[3,"ViewRepr"],[3,"IxDynImpl"],[3,"Dim"],[3,"SliceInfo"],[3,"IndicesIter"],[3,"Indices"],[3,"ExactChunks"],[3,"ExactChunksMut"],[3,"ExactChunksIter"],[3,"ExactChunksIterMut"],[3,"Windows"],[3,"Lanes"],[3,"LanesMut"],[3,"Iter"],[3,"IndexedIter"],[3,"IterMut"],[3,"IndexedIterMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"StrideShape"],[3,"Zip"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"ShapeBuilder"],[8,"IndexLonger"],[8,"Data"],[8,"FixedInitializer"],[8,"NdProducer"],[8,"IntoNdProducer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"],[6,"IxDyn"],[3,"Axes"],[6,"Array1"],[6,"Array2"],[6,"Array3"],[6,"Array"]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[3,"ParseComplexError","","",N,N],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["complex"]]],[11,"new","","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["self"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"inv","","",0,[[["self"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",N,N],[12,"kind","","",0,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",1,N],[13,"Invalid","","",1,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bounds","","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",3,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",3,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",3,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",3,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",3,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",3,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",3,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",3,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",3,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",3,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",3,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",3,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",3,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",3,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",4,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",5,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[["self"]],["t"]]],[0,"float","num_traits","",N,N],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",7,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",7,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",7,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",7,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",7,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",7,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",7,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",7,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",7,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",8,[[],["self"]]],[10,"infinity","","Returns the infinite value.",8,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",8,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",8,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",8,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",8,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",8,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",8,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",8,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",8,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",8,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",8,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",8,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",8,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",8,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",8,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",8,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",8,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",8,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",8,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",8,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",8,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",8,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",8,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",8,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",8,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",8,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",8,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",8,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",8,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",8,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",8,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",8,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",8,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",8,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",8,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",8,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",8,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",8,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",9,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",9,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[],["self"]]],[0,"identities","num_traits","",N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",11,[[["self"]],["bool"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[0,"ops","num_traits","",N,N],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",13,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",14,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",15,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",16,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",17,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",18,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",19,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",20,[[["self"],["u32"]],["option"]]],[0,"inv","num_traits::ops","",N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",21,N],[10,"inv","","Returns the multiplicative inverse of `self`.",21,N],[0,"mul_add","num_traits::ops","",N,N],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",22,N],[10,"mul_add","","Performs the fused multiply-add operation.",22,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[["self"],["a"],["b"]]]],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",24,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",24,[[["self"],["self"]],["self"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",25,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",26,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",27,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",28,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",29,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Pow","","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",30,N],[10,"pow","","Returns `self` to the power `rhs`.",30,N],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",31,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",31,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",31,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",31,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",31,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",31,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",31,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",31,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",31,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",31,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",31,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",31,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",31,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",31,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",31,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",31,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",31,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",31,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",31,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",31,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",31,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",31,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",31,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",31,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",31,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",31,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",31,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",31,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",31,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",31,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",31,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",31,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",31,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",31,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",31,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",31,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",31,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",31,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",31,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",31,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",31,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",31,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",31,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",31,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",31,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",31,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",31,[[["self"]],["self"]]],[0,"sign","num_traits","",N,N],[5,"abs","num_traits::sign","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",32,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",32,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",32,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",32,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",32,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",33,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",33,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex["quadrature"]={"doc":"The primary function of this library is `integrate`, witch uses the double exponential algorithm. It is a port of the Fast Numerical Integration from c++ to rust. The original code is by John D. Cook, and is licensed under the BSD.","items":[[3,"Output","quadrature","",N,N],[12,"num_function_evaluations","","",0,N],[12,"error_estimate","","",0,N],[12,"integral","","",0,N],[0,"double_exponential","","The double exponential algorithm is naturally adaptive, it stops calling the integrand when the error is reduced to below the desired threshold. It also does not allocate. No box, no vec, etc. It has a hard coded maximum of approximately 350 function evaluations. This guarantees that the algorithm will return. The error in the algorithm decreases exponentially in the number of function evaluations, specifically O(exp(-cN/log(N))). So if 350 function evaluations is not giving the desired accuracy than the programmer probably needs to give some guidance by splitting up the range at singularities or other preparation techniques.",N,N],[5,"integrate","quadrature::double_exponential","Integrate an analytic function over a finite interval. f is the function to be integrated. a is left limit of integration. b is right limit of integration target_absolute_error is the desired bound on error",N,[[["f"],["f64"],["f64"],["f64"]],["output"]]],[0,"clenshaw_curtis","quadrature","The `clenshaw_curtis` module provides a `integrate` function with the same signature as `quadrature::integrate`. The implemented variant of clenshaw curtis quadrature is adaptive, however the weights change for each adaptation. This unfortunately means that the sum needs to be recalculated for each layer of adaptation. It also does not allocate on the heap, however it does use a `[f64; 129]` to store the function values. It has a hard coded maximum of approximately 257 function evaluations. This guarantees that the algorithm will return. The clenshaw curtis algorithm exactly integrates polynomials of order N. This implementation starts with an N of approximately 5 and increases up to an N of approximately 257. In general the error in the algorithm decreases exponentially in the number of function evaluations. In summery clenshaw curtis will in general use more stack space and run slower than the double exponential algorithm, unless clenshaw curtis can get the exact solution.",N,N],[5,"integrate","quadrature::clenshaw_curtis","Integrate an analytic function over a finite interval. f is the function to be integrated. a is left limit of integration. b is right limit of integration target_absolute_error is the desired bound on error",N,[[["f"],["f64"],["f64"],["f64"]],["output"]]],[11,"clone","quadrature","",0,[[["self"]],["output"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Output"]]};
searchIndex["rawpointer"]={"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to `end`. Return the arithmetic difference if `T` is zero size.",N,N],[8,"PointerExt","","Extension methods for raw pointers",N,N],[10,"offset","","",0,[[["self"],["isize"]],["self"]]],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"inc","","Increment by 1",0,[[["self"]]]],[11,"dec","","Decrement by 1",0,[[["self"]]]],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,[[["self"],["isize"],["usize"]],["self"]]]],"paths":[[8,"PointerExt"]]};
searchIndex["special_functions"]={"doc":"Library providing pure rust implementation of various special functions, with particular focus to high-energy particle physics.","items":[[0,"bessel","special_functions","Bessel functions",N,N],[5,"k_0","special_functions::bessel","Approximation of modified Bessel function \\(K_0(x)\\) for all \\(x \\geq 0\\).",N,[[["f64"]],["f64"]]],[5,"k_1","","Approximation of modified Bessel function \\(K_1(x)\\) for all \\(x \\geq 0\\).",N,[[["f64"]],["f64"]]],[5,"k_2","","Approximation of modified Bessel function \\(K_2(x)\\) for all \\(x \\geq 0\\).",N,[[["f64"]],["f64"]]],[5,"k_3","","Approximation of modified Bessel function \\(K_3(x)\\) for all \\(x \\geq 0\\).",N,[[["f64"]],["f64"]]],[0,"interpolation","special_functions","Interpolation functions",N,N],[5,"linear","special_functions::interpolation","Perform linear interpolation on data.",N,N],[0,"polylog","special_functions","Polylogarithms",N,N],[5,"bose_einstein","special_functions::polylog","Approximation of polylogarithm appearing in the Bose–Einstein statistics. Specifically, this approximates the function \\(\\Li_{3} e^x\\) for \\(x \\leq 0\\).",N,[[["f64"]],["f64"]]],[5,"fermi_dirac","","Approximation of polylogarithm appearing in the Fermi–Dirac statistics. Specifically, this approximates the function \\(-\\Li_{3} (-e^x)\\) for all values of \\(x\\).",N,[[["f64"]],["f64"]]],[0,"polynomial","special_functions","Utilities to handle polynomials",N,N],[5,"polynomial","special_functions::polynomial","Evaluates an arbitrary single-variable polynomial at a particular point.",N,N]],"paths":[]};
initSearch(searchIndex);
